--- RCPTT testcase ---
Format-Version: 1.0
Context-Type: org.eclipse.rcptt.ctx.ecl
Element-Name: ECL-SMOKE-PROCS
Element-Type: context
Element-Version: 2.0
Id: _DSUP8P5YEeilFekyyVb9lA
Runtime-Version: 2.4.0.201902010011
Save-Time: 6/27/19, 1:36 PM

------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998
Content-Type: text/ecl
Entry-Name: .ecl.context

// For future people trying to figure out what is going on with temp directory names; "${rnd.tmp.dir}" is looked-for
// 	and substituted, in NewSpecWizardPage.

// Set up the app window; remove all existing specs from the Spec Explorer; create a new spec with the default name
proc "OpenTLACreateNew"
{
	try -command {
		SetUpAppWindow
		DeleteSpecNew
	}
	-finally {
		CreateNewSpec $TLA-File
	}
}

// Create a spec with a given name
proc "CreateNewSpec" [val fileName -input]
{
	get-menu -path "File/Open Spec/Add New Spec..." | click
	get-window -class WizardDialog | get-editbox -after [get-label "Root-module file:"]
		| set-text [concat "${rnd.tmp.dir}" [get-java-property "file.separator"] $fileName]
	with [get-window -class WizardDialog] {
	    get-label "New TLA+ Specification" | get-property caption | equals "New TLA+ Specification" | verify-true
	    with [get-button "Finish"] {
			get-property enablement | equals true | verify-true
	        get-property caption | equals "&Finish" | verify-true
		 }
	}
 	get-window -class WizardDialog | get-button Finish | click
}

// set up main window
proc "SetUpAppWindow"
{
	get-eclipse-window | get-object | invoke setSize 1400 1024
	try {
		get-view "Spec Explorer"
	} -catch {
		// couldn't get the view because it was in a minimzed couplet - close the errant open second welcome view
		try {
			get-view "Welcome View" | close
		} -catch { }
	}
}

// Adds a new, additional, module in an already open specification
proc "AddModule"
{
	// "tla.rcptt.spec.dir" is set in NewSpecWizardPage when a spec with "${rnd.tmp.dir}" is made
	set-dialog-result File [concat [get-java-property "tla.rcptt.spec.dir"] [get-java-property "file.separator"] $TLA-ADDITIONAL-MODULE-NAME-FILE]
	get-menu -path "File/Open Module/Add TLA+ Module..." | click
	with [get-window -text "TLA+ Module is not found"] {
		get-button "Yes" | click
	}
}

// Do not call this unless the model editor is the active editor part
proc "wait-run"
{
	//verify that after you run the model that it waits until it completes
	try -times 50 -delay 1200 -command {
	    with [get-button "Runs TLC on the model."] {
	        get-property enablement | equals true | verify-true
	        get-property tooltip | equals "Runs TLC on the model." | verify-true
		}
	}
}

proc "wait-te"
{
	try -times 50 -delay 1200 -command {
	    with [get-view "TLC Errors" | get-section "Error-Trace Exploration" | get-button Restore] {
	        get-property enablement | equals true | verify-true
		}
	}
}

// Delete all specs in the spec explorer - TODO name this proc more appropriately
proc "DeleteSpecNew"
{
    //MAK 04/25/2019: Removed seemingly bogus calls to parse spec & module during deletion.
	//get-menu -path "File/Parse Spec" | click
	//get-menu -path "File/Parse Module" | click
	 
	with [get-view "Spec Explorer" | get-tree] {
		collapse-all
		get-items | foreach {
			let [val item -input] {
				format "project %s" [$item | get-property "caption" -raw] | log
				get-view "Spec Explorer" | get-tree | select $item | get-menu -path "Delete" | click  
				get-window "Delete specification?" | get-button "Yes" | get-property caption | equals "&Yes" | verify-true
				get-window "Delete specification?" | get-button "Yes" | click
			}
		}
	}
}


// Create an invalid Spec
proc "CreateInvalidSpec"
{
	try -command {
		SetUpAppWindow
		get-menu -path "File/Open Spec/Add New Spec..." | click
		get-window -class WizardDialog | get-editbox -after [get-label "New TLA+ Specification"] | get-property text 
		    | equals "Creates a new TLA+ specification\n"
		    + "Enter a complete file name like c:\\jones\\specs\\foo.tla or click on Browse." | verify-true
		get-window -class WizardDialog | get-editbox -after [get-label "Root-module file:"] | set-text $TLA-BAD-DIR
		with [get-window -class WizardDialog] {
		    get-editbox -after [get-label "New TLA+ Specification"] | get-property text 
		        | equals "Root file name should have a file-system path and extension .tla" | verify-true
		    get-button Finish | get-property enablement | equals false | verify-true
		}
	}
	-finally {
		get-window -class WizardDialog | get-button Cancel | click
	}
}


// Create a new spec with a long name
proc "OpenTLACreateNewLongName"
{
	SetUpAppWindow
	get-menu -path "File/Open Spec/Add New Spec..." | click
	//get-window -class WizardDialog | get-editbox -after [get-label "Root-module file:"] | set-text [concat "${rnd.tmp.dir}" "\\" $TLA-File-Long]
	get-window -class WizardDialog | get-editbox -after [get-label "Root-module file:"] | set-text [concat "${rnd.tmp.dir}" [get-java-property "file.separator"] $TLA-File-Long]
                                 //get-by-os 
	get-window -class WizardDialog | get-button Finish | get-property grayed | equals false | verify-true
	get-window -class WizardDialog | get-button Finish | click
	get-view "Spec Explorer" | get-tree | get-property itemCount | equals 1 | verify-true
}


// Create ten new models
proc "CreateTenNewModels"
{
	repeat -times 10 -command {
		get-menu -path "TLC Model Checker/New Model..." | click
		get-window "New model..." | get-label "Please input the name of the model to create" | get-property caption 
		    | equals "Please input the name of the model to create" | verify-true
		get-window "New model..." | get-button OK | click
		wait -ms 1000
	}
}


// Given a tree, does is there an item with the given path that exists?
proc "has-item" [val tree -input] [val item]
{
	try {
		$tree | get-item $item
		bool true
	} -catch {
		bool false
	}
}


// Given the name of an editor, does is it exist in the workbench?
proc "editor-exists" [val editorName]
{
	try {
		get-editor $editorName
		bool true
	} -catch {
		bool false
	}
}

------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998--
