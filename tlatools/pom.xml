<?xml version="1.0" encoding="UTF-8"?>
<project
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
  xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <artifactId>parent</artifactId>
    <groupId>tlatoolbox</groupId>
    <version>0.0.1-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>
  <groupId>tlatoolbox</groupId>
  <artifactId>org.lamport.tlatools</artifactId>
  <version>1.0.0-SNAPSHOT</version>
  <packaging>eclipse-plugin</packaging>

  <properties>
    <!-- tlatools is a non-standard maven project. Its heart is customBuild.xml written for ant          -->
    <!-- which gets invoked from maven. Unfortunately, it means that the tasks which are executed        -->
    <!-- by ant are not visible to maven. In this case it results in sonar not finding necessary         -->
    <!-- data to include coverage information. The properties below make sure that sonar finds the data. -->
	<sonar.sources>src,src-aj</sonar.sources>
	<sonar.tests>test,test-verify,test-long,test-concurrent</sonar.tests>

	<sonar.java.binaries>class</sonar.java.binaries>
	<sonar.java.libraries>lib/*.jar</sonar.java.libraries>
	
	<sonar.java.test.binaries>class,test-class</sonar.java.test.binaries>
	<sonar.java.test.libraries>lib/*.jar</sonar.java.test.libraries>
	 
	<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
	<sonar.surefire.reportsPath>target/surefire-reports</sonar.surefire.reportsPath>
	<sonar.junit.reportsPath>target/surefire-reports</sonar.junit.reportsPath>
	<sonar.jacoco.reportPaths>target/code-coverage.exec</sonar.jacoco.reportPaths>
  </properties>


    <build>
    <plugins>
		<!-- Delete the ../states/ folder created by the Ant JUnit tests as part 
			of the maven-antrun-plugin of customBuild.xml. On the CI-machine, the ../states/ 
			folder gradually grows to eventually fill-up the entire disk. -->
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-clean-plugin</artifactId>
            <version>3.0.0</version>
            <configuration>
                <filesets>
                    <fileset>
                        <directory>../states/</directory>
                        <includes>
                            <include>**/*</include>
                        </includes>
                        <followSymlinks>false</followSymlinks>
                    </fileset>
                </filesets>
            </configuration>
        </plugin>
        
        <plugin>
	    <groupId>org.apache.maven.plugins</groupId>
	    <artifactId>maven-antrun-plugin</artifactId>
	    <version>1.8</version>
	    <executions>
	    	<execution>
	    		<id>compile</id>
	    		<phase>compile</phase>
	    		<configuration>
	    			<tasks>

						<taskdef name="junit"
							classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"
							classpathref="maven.test.classpath" />

		    			<property name="build.compiler" value="extJavac"/>
		    			<property name="maven.test.skip" value="${maven.test.skip}"/>
		    			<property name="maven.test.halt" value="${maven.test.halt}"/>
	    				<ant antfile="customBuild.xml" inheritRefs="true">
	    					<target name="default-maven" />
	    				</ant>
	    			</tasks>
	    		</configuration>
	    		<goals>
	    			<goal>run</goal>
	    		</goals>
	    	</execution>
	    	<!-- Run customBuild.xml's clean target -->
	    	<execution>
	    		<id>clean</id>
	    		<phase>clean</phase>
	    		<configuration>
	    			<tasks>

						<taskdef name="junit"
							classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"
							classpathref="maven.test.classpath" />

		    			<property name="build.compiler" value="extJavac"/>
		    			<property name="maven.test.skip" value="${maven.test.skip}"/>
		    			<property name="maven.test.halt" value="${maven.test.halt}"/>
	    				<ant antfile="customBuild.xml" inheritRefs="true">
	    					<target name="clean" />
	    				</ant>
	    			</tasks>
	    		</configuration>
	    		<goals>
	    			<goal>run</goal>
	    		</goals>
	    	</execution>
	   	 </executions>
	  	</plugin>
			<!-- Compile java sources and exclude aspects -->
	      <plugin>
	        <groupId>org.eclipse.tycho</groupId>
	        <artifactId>tycho-compiler-plugin</artifactId>
	        <version>${tycho-version}</version>
	        <configuration>
				<!-- Ignore compiler errors due to forbidden sun.misc.Unsafe imports -->
				<!-- https://bugs.eclipse.org/369187 -->
				<compilerArgument>-err:-forbidden</compilerArgument>
	          <excludeResources>
	            <exludeResource>**/*.aj</exludeResource>
	          </excludeResources>
	        </configuration>
	      </plugin>

			<!-- Compile aspects -->
            <plugin>
                <!-- https://github.com/nickwongdev/aspectj-maven-plugin -->
                <groupId>com.nickwongdev</groupId>
                <artifactId>aspectj-maven-plugin</artifactId>
                <version>1.12.1</version>
                <configuration>
                    <ajdtBuildDefFile>build.ajproperties</ajdtBuildDefFile>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                        <configuration>
                            <complianceLevel>1.8</complianceLevel>
                            <source>1.8</source>
                            <target>1.8</target>
                        </configuration>
                    </execution>
               </executions>
           </plugin>
      </plugins>
  </build>

  <dependencies>
	<dependency>
		<groupId>org.apache.ant</groupId>
		<artifactId>ant-junit</artifactId>
		<version>1.7.1</version>
		<scope>compile</scope>
	</dependency>
  		<dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
            <version>1.9.1</version>
        </dependency>
      </dependencies>

      <!-- August 2014 - TL
           added a non-default profile (must be called explicitly)
           which creates a jar file and set XMLExporter as the main class.
       -->
    <profiles>
      <profile>
        <id>exporter</id>
        <build>
          <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-shade-plugin</artifactId>
            <version>2.0</version>
            <executions>
              <execution>
                <phase>package</phase>
                <goals>
                  <goal>shade</goal>
                </goals>
                <configuration>
                   <includes>
                     <include>**/tlatools*</include>
                   </includes>
                  <minimizeJar>true</minimizeJar>
                  <transformers>
                    <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                      <manifestEntries>
                        <Main-Class>tla2sany.xml.XMLExporter</Main-Class>
                      </manifestEntries>
                    </transformer>
                  </transformers>
                  <filters>
                  <filter>
                    <artifact>*:*</artifact>
                      <excludes>
                        <exclude>**/*Test*.*</exclude>
                      </excludes>
                    </filter>
                  </filters>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
        </build>
    </profile>
  </profiles>
</project>
