<?xml version="1.0" encoding="UTF-8"?>
<project name="TLA+ Tools" default="default" xmlns:jacoco="antlib:org.jacoco.ant">

	<!-- load property file -->
	<loadproperties srcfile="project.properties" />

	<!-- linking with system properties -->
	<property environment="env" />

	<!-- setup classpath -->
	<path id="project.classpath">

	</path>

	<!-- timestamp -->
	<tstamp>
		<format property="TODAY" pattern="yyyy-MM-dd" locale="en,US" />
	</tstamp>

	<!-- JaCoCo code coverage -->
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="lib/jacocoant.jar"/>
	</taskdef>

	<taskdef resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties">
		<classpath>
			<pathelement location="lib/aspectjtools-1.9.2.jar" />
		</classpath>
	</taskdef>
	
	<condition property="test.skip">
		<istrue value="${maven.test.skip}"/>
	</condition>

	<condition property="test.halt">
		<istrue value="${maven.test.halt}"/>
	</condition>

	<!-- https://github.com/alx3apps/jgit-buildnumber -->
	<target name="git-revision">
	    <taskdef name="jgit-buildnumber" classname="ru.concerteza.util.buildnumber.JGitBuildNumberAntTask">
			<classpath>
				<pathelement location="lib/org.eclipse.jgit-2.3.1.201302201838-r.jar"/>
				<pathelement location="lib/jgit-buildnumber-ant-task-1.2.10.jar" />
			</classpath>
	    </taskdef>
	    <jgit-buildnumber/>
	</target>
	
	<target name="info" description="Prints information" depends="git-revision">
		<echo message="ANT_HOME       : ${env.ANT_HOME}" />
		<echo message="Ant Version    : ${ant.version}" />
		<echo message="Java Version   : ${ant.java.version}" />
		<echo message="Skipping Tests : ${test.skip}" />
		<echo message="With AspectJ   : ${withaj}" />
		<echo message="Git BuildNumber: ${git.branch}_${git.tag}_${git.shortRevision}" />
	</target>

	<target name="default" depends="info" description="Default">
		<antcall target="compile" inheritall="true" inheritrefs="true" />
		<antcall target="compile-aj" inheritall="true" inheritrefs="true" />
		<antcall target="compile-test" inheritall="true" inheritrefs="true" />
		<antcall target="test" inheritall="true" inheritrefs="true" />
		<antcall target="git-revision" inheritall="true" inheritrefs="true" />
		<antcall target="dist" inheritall="true" inheritrefs="true" />
		<antcall target="test-dist" inheritall="true" inheritrefs="true" />
	</target>
	
	<!-- Similar to default except it skips test and only runs test-dist. This is called from pom.xml -->
	<target name="default-maven" depends="info" description="Default">
		<antcall target="compile" inheritall="true" inheritrefs="true" />
		<antcall target="compile-aj" inheritall="true" inheritrefs="true" />
		<antcall target="compile-test" inheritall="true" inheritrefs="true" />
		<!-- <antcall target="test" inheritall="true" inheritrefs="true" /> -->
		<antcall target="git-revision" inheritall="true" inheritrefs="true" />
		<antcall target="dist" inheritall="true" inheritrefs="true" />
		<antcall target="test-dist" inheritall="true" inheritrefs="true" />
	</target>

	<target name="default-release" depends="info" description="Produces a release">
		<antcall target="compile" inheritall="true" inheritrefs="true" />
		<antcall target="dist-mixed-zip" inheritall="true" inheritrefs="true" />
	</target>

	<!-- Compiles and runs the short-running tests. -->
	<target name="shorttests" depends="info" description="Run tests">
		<antcall target="default" inheritall="true" inheritrefs="true" />
		<antcall target="test-verify" inheritall="true" inheritrefs="true" />
	</target>

	<!-- Compiles and runs *only* the long-running tests. Not the ones. -->
	<target name="longtests" depends="info" description="Run long-running tests">
		<antcall target="compile" inheritall="true" inheritrefs="true" />
		<antcall target="compile-aj" inheritall="true" inheritrefs="true">
			<!-- long tests require AspjectJ -->
	        <param name="withaj" value="true"/>
	    </antcall>
		<antcall target="compile-test" inheritall="true" inheritrefs="true" />
		<antcall target="dist" inheritall="true" inheritrefs="true" />
		<antcall target="test-dist-long" inheritall="true" inheritrefs="true" />
	</target>
	
	<!-- ===========================================================-->
	<!-- Don't call any of the targets below, use the umbrella      -->
	<!-- targets above which correctly call a target's dependencies -->
	<!-- ===========================================================-->

	<!-- Cleans the compilation output directory -->
	<target name="clean" unless="noclean">
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${class.dir}" includes="*/**" />
			<fileset dir="${test.class.dir}" includes="*/**" />
		</delete>
		<!-- Delete leftovers from previous junit invocation -->
		<delete includeemptydirs="true" failonerror="false">
			<!-- Delete ALL states folders in the tlatools/ directory -->
			<!-- A stale states/ folder in src/model/ once caused the -->
			<!-- Maven build to fail with an OOM in the pack200 task. --> 
			<fileset dir="${basedir}" includes="**/states/**" />
		</delete>
	</target>

	<!-- Compiles the TLA+ tools code -->
	<target name="compile" depends="clean">
		<echo>
			================================================================
			= The following warnings about sun.misc.Unsafe can be ignored. = 
			= OffHeapDiskFPSet has been written using Unsafe to best use   =
			= a computer's memory. If Unsafe is removed from the JVM,      =
			= OffHeapDiskFPSet won't work anymore.                         =
			================================================================
		</echo>
		<!-- compile -->
		<mkdir dir="${class.dir}" />
		<javac includeantruntime="false" srcdir="${src.dir}" destdir="${class.dir}" debug="true" verbose="false" source="1.8" target="1.8">
			<!-- compilerarg value="-Xlint:deprecation"/-->
			<classpath refid="project.classpath" />
			<classpath>
				<pathelement location="lib/javax.mail/mailapi-1.6.3.jar" />
			</classpath>
		</javac>

		<!-- copy the resource files -->
		<copy todir="${class.dir}">
			<fileset dir="${src.dir}">
				<include name="**/*.*" />
				<exclude name="**/*.java" />
				<exclude name="**/*.~*" />
				<exclude name="**/*##*" />
				<exclude name="**/*.09-09-07" />
				<exclude name="**/*.09-07-02" />
				<exclude name="**/*.11-02-10" />
				<exclude name="**/*.jpg" />
			</fileset>
		</copy>
	</target>

	<!-- Compiles AspectJ auxiliary code -->
	<target name="compile-aj" if="withaj">
		<echo>
			====================================================================
			= The following warnings (Xlint:adviceDidNotMatch) can be ignored. =
			= We are doing load time weaving that kicks in when TLC gets       = 
			= started, not when it is compiled.                                =
			====================================================================
		</echo>
		<!-- compile aspectj related class files -->
		<iajc destdir="${class.dir}" debug="true" verbose="true" source="1.8" target="1.8">
			<sourceroots>
				<!-- Here we implicitly decide to use AspectJ Load-Time weaving by excludign ${src.dir} as a pathelement. Adding ${src.dir} results in aspects being woven at compile-time as part of the ant build. -->
				<pathelement location="${src-aj.dir}"/>
			</sourceroots>
			<classpath refid="project.classpath" />
			<classpath>
				<pathelement location="lib/aspectjrt-1.9.2.jar" />
				<pathelement location="lib/aspectjtools-1.9.2.jar" />
				<pathelement path="${class.dir}" />
			</classpath>
		</iajc>
		<!-- copy the resource files -->
		<copy todir="${class.dir}">
			<fileset dir="${src-aj.dir}">
				<include name="**/*.*" />
				<exclude name="**/*.aj" />
				<exclude name="**/*.java" />
				<exclude name="**/*.~*" />
				<exclude name="**/*##*" />
			</fileset>
		</copy>
		<!-- These files are requried for load time weaving and during runtime -->
		<copy todir="${class.dir}/lib">
			<fileset dir="lib/">
				<include name="aspectjrt-1.9.2.jar" />
				<include name="aspectjweaver-1.9.2.jar" />
			</fileset>
		</copy>
	</target>

	<!-- Creates a distribution out of compiled code -->
	<target name="dist">
		<!-- Extract javax.mail jar into class directory to be packaged into tla2tools.jar -->
		<!-- javax.mail is used by the MailSender functionality, that mails the output -->
		<!-- of TLC to a given email address. -->
		<!-- The javax.mail dependency as well as javax.activation is also depended upon -->
		<!-- by the tla2tools OSGi bundle and is expected to be the same version. -->
		<unzip src="lib/javax.mail/mailapi-1.6.3.jar" dest="${class.dir}">
			<patternset>
			    <include name="**/*.class"/>
			    <include name="META-INF/LICENSE.txt"/>
			    <include name="META-INF/mailcap"/>
			    <include name="META-INF/javamail.charset.map"/>
				<exclude name="javax/mail/search/**"/>
			</patternset>
		</unzip>
		<unzip src="lib/javax.mail/smtp-1.6.3.jar" dest="${class.dir}">
			<patternset>
		        <include name="**/*.class"/>
			</patternset>
		</unzip>
		<unzip src="lib/javax.mail/javax.activation_1.1.0.v201211130549.jar" dest="${class.dir}">
			<patternset>
		        <include name="**/*.class"/>
				<exclude name="org/**"/>
			</patternset>
		</unzip>
		<touch file="${class.dir}/META-INF/javamail.default.address.map"/>

		<!-- Extract javax.mail to maven classes folder. This script is triggered by -->
		<!-- maven. However, maven compiles the code again to target/classes from -->
		<!-- where it creates the plugin -->
		<unzip src="lib/javax.mail/mailapi-1.6.3.jar" dest="target/classes">
			<patternset>
			    <include name="**/*.class"/>
			    <include name="META-INF/LICENSE.txt"/>
			    <include name="META-INF/mailcap"/>
			    <include name="META-INF/javamail.charset.map"/>
				<exclude name="javax/mail/search/**"/>
			</patternset>
		</unzip>
		<unzip src="lib/javax.mail/smtp-1.6.3.jar" dest="target/classes">
			<patternset>
		        <include name="**/*.class"/>
			</patternset>
		</unzip>
		<unzip src="lib/javax.mail/javax.activation_1.1.0.v201211130549.jar" dest="target/classes">
			<patternset>
		        <include name="**/*.class"/>
				<exclude name="org/**"/>
			</patternset>
		</unzip>
		<touch file="target/classes/META-INF/javamail.default.address.map"/>


		<!-- create a JAR file for the users -->
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.file}" level="9">
			<fileset dir="${class.dir}" includes="**/*" excludes="
					**/*.jpg,
					README.txt,
				    heapstats.jfc,
				    jpf.properties,
					tlc2/tool/fp/*.tla,
					tlc2/value/*.tla,
					pcal/*.tla,
					META-INF/maven/,
					src/tla2sany/parser/ParseException.09-09-07,
					src/tla2sany/parser/TLAplusParser.09-07-02,
					src/tla2sany/parser/TLAplusParser.11-02-10,
					src/tla2sany/parser/TLAplusParserConstants.09-07-02,
					src/tla2sany/parser/TLAplusParserConstants.09-09-07,
					src/tla2sany/parser/TLAplusParserConstants.11-02-10,
					src/tla2sany/parser/TLAplusParserTokenManager.09-07-02,
					src/tla2sany/parser/TLAplusParserTokenManager.09-09-07,
					src/tla2sany/parser/TLAplusParserTokenManager.11-02-10,
					src/tla2sany/parser/Token.09-09-07,
					src/tla2sany/parser/TokenMgrError.09-09-07"/>
			<fileset dir="${doc.dir}" includes="License.txt"/>
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Build-Tag" value="${env.BUILD_TAG}" />
				<attribute name="Build-Rev" value="${Build-Rev}" />
				<attribute name="Implementation-Title" value="TLA+ Tools" />
				<attribute name="Implementation-Version" value="${version} ${TODAY}" />
				<attribute name="Implementation-Vendor" value="Microsoft Corp." />
				<!-- The jar files contains many main classes (SANY, TEX, pcal, ...) --> 
                <!-- but lets consider TLC the one users primarily use. --> 
				<attribute name="Main-class" value="tlc2.TLC" />
				<!-- Git revision -->
				<attribute name="X-Git-Branch" value="${git.branch}" />
				<attribute name="X-Git-Tag" value="${git.tag}" />
				<attribute name="X-Git-Revision" value="${git.revision}" />
				<attribute name="X-Git-ShortRevision" value="${git.shortRevision}" />
				<attribute name="X-Git-BuildNumber" value="${git.branch}_${git.tag}_${git.shortRevision}" />
				<attribute name="X-Git-Commits-Count" value="${git.commitsCount}" />
				<!-- App-Name and Permissions is required by Java Webstart used by distributed TLC -->
				<!-- Depending on security level, the user will see a warning otherwise. -->
				<!-- http://docs.oracle.com/javase/7/docs/technotes/guides/jweb/security/manifest.html -->
				<attribute name="Application-Name" value="TLC" />
				<attribute name="permissions" value="all-permissions" />
				<!-- won't work with 'sandbox' as it writes files -->
			</manifest>
		</jar>
	</target>

	<!-- Compiles the TLA+ tools *test* code -->
	<target name="compile-test" unless="test.skip">
		<!-- compile unit tests -->
		<mkdir dir="${test.class.dir}" />
		<javac includeantruntime="false" srcdir="${test.dir}" destdir="${test.class.dir}" debug="true" verbose="false" source="1.8" target="1.8">
			<classpath refid="project.classpath" />
			<classpath>
				<pathelement location="lib/junit-4.12.jar" />
				<pathelement location="lib/hamcrest-core-1.3.jar" />
				<pathelement location="lib/easymock-3.3.1.jar" />
				<pathelement path="${class.dir}" />
			</classpath>
		</javac>
		<!-- Include auxilliary files when compiling classes. -->
		<copy todir="${test.class.dir}">
		   <fileset dir="${test.dir}" includes="**/*.dot"/>
		</copy>		
		<!-- copy class.dir to path with whitespace -->
		<!-- this is required by some tests to make sense -->
		<!-- even throw a non digit in -->
		<property name="ws.class.dir" value="TLA+ Tools" />
		<copy todir="${ws.class.dir}">
			<fileset dir="${class.dir}" />
		</copy>
	</target>

	<!-- Executes accompining unit tests -->
	<target name="test" unless="test.skip">
		<!-- run junit tests -->
		<mkdir dir="${test.reports}" />
		<!-- forkmode used to be "perBatch" on Java 1.8 using the util.IsolatedTestCaseRunner.  
		     This concept broken with Java11 for unknown reasons which is why forkmode has been
		     changed to perTest to run each test in a separate VM.  This is slower compared to
		     running all tests in a single VM. -->
		<junit printsummary="yes" haltonfailure="${test.halt}" showoutput="no" haltonerror="${test.halt}"  forkmode="perTest" fork="yes">
			<!-- enable all assertions -->
			<jvmarg value="-ea"/>
			<jvmarg value="-XX:MaxDirectMemorySize=512k"/>
			<jvmarg value="-XX:+UseParallelGC"/>
			<!-- Uncomment to open a debug port in each forked VM to remote attach your Eclipse at port 1044.
            <jvmarg value="-Xdebug" />
	        <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=1044" />
			-->
			<classpath refid="project.classpath" />
			<classpath>
				<pathelement location="lib/junit-4.12.jar" />
				<pathelement location="lib/hamcrest-core-1.3.jar" />
				<pathelement location="lib/cglib-nodep-3.1.jar" />
				<pathelement location="lib/objenesis-2.1.jar" />
				<pathelement location="lib/easymock-3.3.1.jar" />
				<pathelement location="lib/javax.mail/mailapi-1.6.3.jar" />
				<pathelement location="test-model/UserModuleOverrideFromJar.jar" />
				<pathelement path="${class.dir}" />
				<pathelement path="${test.class.dir}" />
				<pathelement path="test-model/" />
			</classpath>
			<formatter type="xml" />

			<!-- Pass the base path of the tlatools project to unit tests in case they need it to locate TLA+ specs or configs -->
			<sysproperty key="basedir" value="${basedir}/"/>
			<sysproperty key="tlc2.tool.fp.FPSet.impl" value="tlc2.tool.fp.OffHeapDiskFPSet"/>
			<sysproperty key="util.FileUtil.milliseconds" value="true"/>
			<sysproperty key="tlc2.tool.distributed.TLCWorker.threadCount" value="4"/>
			<!-- The tests below can be tricked into running in a single VM by fiddling with the classloader 
			     to reload and thus initialize all classes for each tests. -->
			<batchtest fork="yes" todir="${test.reports}">
				<fileset dir="${test.dir}">
					<include name="**/*Test*.java" />
					
					<!-- Produce bogus crash with Quarantine runner. -->
					<exclude name="tlc2/tool/distributed/TLCSetTest.java" />
					<exclude name="tlc2/tool/distributed/DistributedDoInitFunctorEvalExceptionTest.java" />
					<!-- Just fail because of Quarantine runner. -->
					<exclude name="tlc2/TLCTest.java"/>
					<exclude name="tlc2/tool/fp/OffHeapDiskFPSetTest.java"/>
					<exclude name="tlc2/tool/UserModuleOverrideTest.java" />
					<exclude name="tlc2/tool/UserModuleOverrideFromJarTest.java" />
					<exclude name="tlc2/tool/UserModuleOverrideAnnotationTest.java" />
					
					<exclude name="**/PCalTest.java" />
					<exclude name="**/CommonTestCase.java" />
					<exclude name="**/ModelCheckerTestCase.java" />
					<exclude name="**/PCalModelCheckerTestCase.java" />
					<exclude name="**/SuiteTestCase.java" />
					<exclude name="**/SuiteETestCase.java" />
					<exclude name="**/DistributedTLCTestCase.java" />
					<exclude name="**/TLCServerTestCase.java" />
					<exclude name="**/SuccessfulSimulationTestCase.java" />
					<exclude name="**/AbstractExampleTestCase.java" />
					<exclude name="**/AbstractCoverageTest.java" />
					<exclude name="**/InitEvalOrderTest.java" />
					<exclude name="**/TestMPRecorder.java" />
					<exclude name="**/TestPrintStream.java" />
					<exclude name="**/BidirectionalTransitions1BTest.java" />
					<exclude name="**/BidirectionalTransitions2CTest.java" />
					<exclude name="**/Abstract*Test.java" />
					<exclude name="**/TestDriver.java" />
					<exclude name="**/TestDriver2.java" />
					<exclude name="**/AllTests.java" />
					<exclude name="util/IsolatedTestCaseRunner.java"/>
					<!-- Known test failures -->
					<exclude name="**/pcal/StackTestTest.java" />
					<exclude name="**/pcal/TestPCandStackTest.java" />
					<!-- These take too long -->
					<exclude name="**/MacroQuicksortTest.java" />
					<exclude name="**/MacroRealQuicksortTest.java" />
					<exclude name="**/PcalPaxosTest.java" />
					<exclude name="**/DetlefsTest.java" />
					<exclude name="**/StarkMutexTest.java" />
					<exclude name="**/SimpleMultiProcTest.java" />
				</fileset>
			</batchtest>
			<batchtest fork="yes" todir="${test.reports}">
				<fileset dir="${test.dir}">
					<include name="tlc2/tool/UserModuleOverrideAnnotationTest.java" />
				</fileset>
			</batchtest>
			<batchtest fork="yes" todir="${test.reports}">
				<fileset dir="${test.dir}">
					<include name="tlc2/tool/UserModuleOverrideFromJarTest.java" />
				</fileset>
			</batchtest>
			<batchtest fork="yes" todir="${test.reports}">
				<fileset dir="${test.dir}">
					<include name="tlc2/tool/UserModuleOverrideTest.java" />
				</fileset>
			</batchtest>
			<batchtest fork="yes" todir="${test.reports}">
				<fileset dir="${test.dir}">
					<include name="tlc2/tool/distributed/TLCSetTest.java" />
				</fileset>
			</batchtest>
			<batchtest fork="yes" todir="${test.reports}">
				<fileset dir="${test.dir}">
					<include name="tlc2/tool/distributed/DistributedDoInitFunctorEvalExceptionTest.java" />
				</fileset>
			</batchtest>
			<batchtest fork="yes" todir="${test.reports}">
				<fileset dir="${test.dir}">
					<include name="tlc2/TLCTest.java"/>
					<include name="tlc2/tool/fp/OffHeapDiskFPSetTest.java"/>
				</fileset>
			</batchtest>
		</junit>

		<!-- remove copied class.dir -->
		<delete dir="${ws.class.dir}" deleteonexit="true"/>
	</target>

	<!-- Executes a single unit test. -->
	<target name="test-single" unless="test.skip">
		<!-- run junit test -->
		<junit printsummary="yes" haltonfailure="true" showoutput="no" haltonerror="true" forkmode="perTest" fork="yes">
			<!-- enable all assertions -->
			<jvmarg value="-ea"/>
			<jvmarg value="-XX:MaxDirectMemorySize=512k"/>
			<jvmarg value="-XX:+UseParallelGC"/>
			<!-- Uncomment to open a debug port in each forked VM to remote attach your Eclipse at port 1044.
            <jvmarg value="-Xdebug" />
	        <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=1044" />
			-->
			<classpath refid="project.classpath" />
			<classpath>
				<pathelement location="lib/junit-4.12.jar" />
				<pathelement location="lib/hamcrest-core-1.3.jar" />
				<pathelement location="lib/cglib-nodep-3.1.jar" />
				<pathelement location="lib/objenesis-2.1.jar" />
				<pathelement location="lib/easymock-3.3.1.jar" />
				<pathelement location="lib/javax.mail/mailapi-1.6.3.jar" />
				<pathelement location="test-model/UserModuleOverrideFromJar.jar" />
				<pathelement path="${class.dir}" />
				<pathelement path="${test.class.dir}" />
				<pathelement path="${test.class.dir}" />
				<pathelement path="test-model/" />
			</classpath>

			<!-- Pass the base path of the tlatools project to unit tests in case they need it to locate TLA+ specs or configs -->
			<sysproperty key="basedir" value="${basedir}/"/>
			<sysproperty key="tlc2.tool.fp.FPSet.impl" value="tlc2.tool.fp.OffHeapDiskFPSet"/>
			<sysproperty key="util.FileUtil.milliseconds" value="true"/>
			<sysproperty key="tlc2.tool.distributed.TLCWorker.threadCount" value="4"/>

			<!-- Print all output of the test to the screen. -->
			<formatter type="plain" usefile="false" />
			<!-- Run a single test case specified by its class name, by setting the property 'test.testcase'. -->
			<test name="${test.testcase}" skipNonTests="true"/>
		</junit>

		<!-- remove copied class.dir -->
		<delete dir="${ws.class.dir}" deleteonexit="true"/>
	</target>

	<!-- Executes accompining unit tests on jar file -->
	<target name="test-dist" unless="test.skip">
		<!-- run junit tests on tlatools.jar -->
		<mkdir dir="${test.reports}/onJar" />
		<jacoco:coverage destfile="target/code-coverage.exec" includes="pcal.*:tla2sany.*:tla2tex.*:tlc2.*:util.*:org.lamport.*" excludes="com.sun.*:javax.*:**/Tests.*:**/*Test*">
			<junit printsummary="yes" haltonfailure="${test.halt}" haltonerror="${test.halt}" forkmode="perTest" fork="yes">
				<!-- enable all assertions -->
				<jvmarg value="-ea"/>
				<jvmarg value="-XX:MaxDirectMemorySize=512k"/>
				<jvmarg value="-XX:+UseParallelGC"/>
				<classpath refid="project.classpath" />
				<classpath>
					<pathelement location="lib/junit-4.12.jar" />
					<pathelement location="lib/hamcrest-core-1.3.jar" />
					<pathelement location="lib/cglib-nodep-3.1.jar" />
					<pathelement location="lib/objenesis-2.1.jar" />
					<pathelement location="lib/easymock-3.3.1.jar" />
					<pathelement location="${dist.file}" />
					<pathelement path="${test.class.dir}" />
					<pathelement path="test-model/" />
					<pathelement location="test-model/UserModuleOverrideFromJar.jar" />
				</classpath>
	
				<formatter type="xml" />
				<sysproperty key="basedir" value="${basedir}/"/>
				<sysproperty key="util.FileUtil.milliseconds" value="true"/>
				<sysproperty key="tlc2.tool.fp.FPSet.impl" value="tlc2.tool.fp.OffHeapDiskFPSet"/>
				<sysproperty key="tlc2.tool.distributed.TLCWorker.threadCount" value="4"/>
	
				<batchtest fork="yes" todir="${test.reports}/onJar">
					<fileset dir="${test.dir}">
						<include name="**/*Test*.java" />
						
						<!-- Produce bogus crash with Quarantine runner. -->
						<exclude name="tlc2/tool/distributed/TLCSetTest.java" />
						<exclude name="tlc2/tool/distributed/DistributedDoInitFunctorEvalExceptionTest.java" />
						<!-- Just fail because of Quarantine runner. -->
						<exclude name="tlc2/TLCTest.java"/>
						<exclude name="tlc2/tool/fp/OffHeapDiskFPSetTest.java"/>
						<exclude name="tlc2/tool/UserModuleOverrideTest.java" />
						<exclude name="tlc2/tool/UserModuleOverrideFromJarTest.java" />
						<exclude name="tlc2/tool/UserModuleOverrideAnnotationTest.java" />
												
						<exclude name="**/PCalTest.java" />
						<exclude name="**/CommonTestCase.java" />
						<exclude name="**/ModelCheckerTestCase.java" />
						<exclude name="**/PCalModelCheckerTestCase.java" />
						<exclude name="**/SuiteTestCase.java" />
						<exclude name="**/SuiteETestCase.java" />
						<exclude name="**/DistributedTLCTestCase.java" />
						<exclude name="**/TLCServerTestCase.java" />
						<exclude name="**/SuccessfulSimulationTestCase.java" />
						<exclude name="**/AbstractExampleTestCase.java" />
						<exclude name="**/AbstractCoverageTest.java" />
						<exclude name="**/InitEvalOrderTest.java" />
						<exclude name="**/BidirectionalTransitions1BTest.java" />
						<exclude name="**/BidirectionalTransitions2CTest.java" />
						<exclude name="**/TestMPRecorder.java" />
						<exclude name="**/TestPrintStream.java" />
						<exclude name="**/Abstract*Test.java" />
						<exclude name="**/TestDriver.java" />
						<exclude name="**/TestDriver2.java" />
						<exclude name="**/AllTests.java" />
						<exclude name="util/IsolatedTestCaseRunner.java"/>
						<!-- Known test failures -->
						<exclude name="**/pcal/StackTestTest.java" />
						<exclude name="**/pcal/TestPCandStackTest.java" />
						<!-- These take too long -->
						<exclude name="**/MacroQuicksortTest.java" />
						<exclude name="**/MacroRealQuicksortTest.java" />
						<exclude name="**/PcalPaxosTest.java" />
						<exclude name="**/DetlefsTest.java" />
						<exclude name="**/StarkMutexTest.java" />
						<exclude name="**/SimpleMultiProcTest.java" />
					</fileset>
				</batchtest>
				<batchtest fork="yes" todir="${test.reports}">
					<fileset dir="${test.dir}">
						<include name="tlc2/tool/UserModuleOverrideAnnotationTest.java" />
					</fileset>
				</batchtest>
				<batchtest fork="yes" todir="${test.reports}">
					<fileset dir="${test.dir}">
						<include name="tlc2/tool/UserModuleOverrideFromJarTest.java" />
					</fileset>
				</batchtest>
				<batchtest fork="yes" todir="${test.reports}/onJar">
					<fileset dir="${test.dir}">
						<include name="tlc2/tool/UserModuleOverrideTest.java" />
					</fileset>
				</batchtest>
				<batchtest fork="yes" todir="${test.reports}/onJar">
					<fileset dir="${test.dir}">
						<include name="tlc2/tool/distributed/TLCSetTest.java" />
					</fileset>
				</batchtest>
				<batchtest fork="yes" todir="${test.reports}/onJar">
					<fileset dir="${test.dir}">
						<include name="tlc2/tool/distributed/DistributedDoInitFunctorEvalExceptionTest.java" />
					</fileset>
				</batchtest>
				<batchtest fork="yes" todir="${test.reports}/onJar">
					<fileset dir="${test.dir}">
						<include name="tlc2/TLCTest.java"/>
						<include name="tlc2/tool/fp/OffHeapDiskFPSetTest.java"/>
					</fileset>
				</batchtest>
			</junit>
		</jacoco:coverage>

		<!-- remove copied class.dir -->
		<delete dir="${ws.class.dir}" deleteonexit="true"/>
	</target>

	<!-- Executes accompining long-running unit tests on jar file -->
	<target name="test-dist-long" unless="test.skip">
		<!-- compile unit tests -->
		<mkdir dir="${test.class.dir}" />
		<javac includeantruntime="false" srcdir="${test.dir}-long" destdir="${test.class.dir}" debug="true" verbose="false">
			<classpath refid="project.classpath" />
			<classpath>
				<pathelement location="lib/junit-4.12.jar" />
				<pathelement location="lib/hamcrest-core-1.3.jar" />
				<pathelement path="${class.dir}" />
			</classpath>
		</javac>
		<!-- copy class.dir to path with whitespace -->
		<!-- this is required by some tests to make sense -->
		<!-- even throw a "+" and whitespace into the mix -->
		<property name="ws.class.dir" value="TLA+ Tools" />
		<copy todir="${ws.class.dir}">
			<fileset dir="${class.dir}" />
		</copy>
		<!-- run junit tests on tlatools.jar -->
		<mkdir dir="${test.reports}/onJarLong" />
		<junit printsummary="yes" haltonfailure="no" haltonerror="no" maxmemory="4096m" forkmode="perTest" fork="yes">
			<!-- enable all assertions -->
			<jvmarg value="-ea"/>
			<jvmarg value="-javaagent:lib/aspectjweaver-1.9.2.jar" />
			<sysproperty key="org.aspectj.weaver.showWeaveInfo" value="false"/>
			<sysproperty key="aj.weaving.verbose" value="false"/>
			<classpath refid="project.classpath" />
			<classpath>
				<pathelement location="lib/junit-4.12.jar" />
				<pathelement location="lib/hamcrest-core-1.3.jar" />
				<pathelement location="${dist.file}" />
				<pathelement path="${test.class.dir}" />
				<!-- Need class.dir on path to find AspectJ related classes which don't get packaged into dist -->
				<pathelement path="${class.dir}" />
			</classpath>

			<formatter type="xml" />

			<batchtest fork="yes" todir="${test.reports}/onJarLong">
				<fileset dir="${test.dir}-long">
					<exclude name="**/MultiThreadedSpecTest.java"/>

					<!-- The following tests take way too long (hours). -->
					<!-- Reactivate when you start working on the fingerprint sets! -->
					<exclude name="**/DiskFPSetTest.java"/>
					<exclude name="**/FPSetTest.java"/>
					<exclude name="**/MSBDiskFPSetTest.java"/>
					<exclude name="**/OffHeapDiskFPSetTest.java"/>
					<exclude name="**/DiskStateQueueTest.java"/>

					<include name="**/*Test*.java" />
				</fileset>
			</batchtest>
		</junit>

		<!-- remove copied class.dir -->
		<delete dir="${ws.class.dir}" deleteonexit="true"/>
	</target>

	<!-- Verifies TLC parts with NASA's pathfinder model checker -->
	<target name="test-verify">
		<mkdir dir="${test.class.dir}"/>
		<!-- Compile our boilerplate code needed to verify TLC. E.g. the StateQueueVerify creates -->
		<!-- examplary produces & consumers and a dummy implementation of StateQueue. -->
		<javac includeantruntime="false" srcdir="${test.dir}-verify" destdir="${test.class.dir}" debug="true" verbose="false">
			<classpath refid="project.classpath" />
			<classpath>
				<pathelement path="${class.dir}" />
				<pathelement location="lib/jpf.jar" />
			</classpath>
		</javac>

		<mkdir dir="${test.reports}/verify" />
		<junit printsummary="yes" haltonfailure="no" haltonerror="no" maxmemory="4096m" forkmode="perTest" fork="yes" 
			dir="${basedir}/test-verify" >
			<classpath refid="project.classpath" />
			<classpath>
				<pathelement location="lib/junit-4.12.jar" />
				<pathelement location="lib/hamcrest-core-1.3.jar" />
				<pathelement location="lib/jpf.jar" />
				<pathelement location="lib/jpf-classes.jar" />
				<pathelement path="${class.dir}" />
				<pathelement path="${test.class.dir}" />
			</classpath>

			<formatter type="xml" />

			<batchtest fork="yes" todir="${test.reports}/verify">
				<fileset dir="${test.dir}-verify">
					<include name="**/*Test*.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!-- http://hg.openjdk.java.net/code-tools/jmh/file/3769055ad883/jmh-ant-sample/build.xml -->
	<target name="benchmark" description="Generate the self-contained JMH benchmark JAR (run with java -jar target/benchmarks.jar)">
		<!-- Compile benchmark class files in test-benchmark against jmh. -->
		<delete dir="target/benchmark/" />
		<mkdir dir="target/benchmark/" />
		<javac includeantruntime="false" srcdir="test-benchmark/" destdir="target/benchmark/">
			<classpath refid="project.classpath" />
			<classpath>
				<pathelement path="${class.dir}" />
				<pathelement path="${test.class.dir}" />
				<pathelement location="lib/jmh/jmh-core-1.21.jar" />
				<pathelement location="lib/jmh/jmh-generator-annprocess-1.21.jar" />
			</classpath>
		</javac>

		<!-- Build benchmark jar which includes third-party deps, TLC proper (without tests) and the benchmark files compiled in the previous step. -->
		<delete file="target/benchmarks.jar" />
		<jar jarfile="target/benchmarks.jar" basedir="target/benchmark/">
			<manifest>
				<attribute name="Main-Class" value="org.openjdk.jmh.Main" />
			</manifest>
<!--			<zipfileset dir="${src.dir}" includes="**/*.java" />-->
			<fileset dir="${class.dir}" includes="**/*" />
			<zipfileset src="lib/jmh/jmh-core-1.21.jar" excludes="**/META-INF/services/**" />
			<zipfileset src="lib/jmh/jopt-simple-4.6.jar" />
			<zipfileset src="lib/jmh/commons-math3-3.2.jar" />
		</jar>
	</target>

	<!-- Build a distribution -->
	<target name="dist-mixed-jar" depends="default">
		<!-- create a JAR file for the users -->
		<jar destfile="${dist-mixed.file.jar}">
			<fileset dir="${class.dir}" includes="**/*" />
			<zipfileset dir="${src.dir}" includes="**/*.java" />
			<zipfileset dir="${doc.dir}">
				<include name="README"/>
				<include name="License.txt"/>
			</zipfileset>
			<zipfileset dir="${examples.dir}" includes="**/*" prefix="examples">
				<include name="**/*"/>
				<exclude name=".project"/>
			</zipfileset>

			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Build-Tag" value="${env.BUILD_TAG}" />
				<attribute name="Build-Rev" value="${Build-Rev}" />
				<attribute name="Implementation-Title" value="TLA+ Tools" />
				<attribute name="Implementation-Version" value="${version} ${TODAY}" />
				<attribute name="Implementation-Vendor" value="Microsoft Corp." />
			</manifest>
		</jar>
	</target>


	<!-- Build a distribution -->
	<target name="dist-mixed-zip" depends="default">
		<!-- create a zip file for the users and developers-->
		<zip destfile="${dist-mixed.file}">
			<zipfileset dir="${src.dir}" includes="**/*.java" prefix="tla" />
			<zipfileset dir="${class.dir}" includes="**/*" prefix="tla" />
			<zipfileset dir="${doc.dir}" prefix="tla">
				<include name="README"/>
				<include name="License.txt"/>
			</zipfileset>
			<zipfileset dir="${examples.dir}" includes="**/*" prefix="tla/examples">
				<include name="**/*"/>
				<exclude name=".project"/>
			</zipfileset>

		</zip>
	</target>
</project>
