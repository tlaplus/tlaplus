// Copyright (c) 2003 Compaq Corporation.  All rights reserved.
// jcg wrote this.
// Last modified on Wed 15 Aug 2007 at 15:45:47 PST by lamport
// last revised February 1st 2000 by J-Ch


// List of all kinds of nodes one can find in the syntax tree,
// together with a method to generate a representation

// numbering starts at 227, previous numbers will identify tokens (with an identifier 
// generated automatically by javacc

/***************************************************************************
* The value assigned to NULL_ID must be greater than the highest token     *
* number generated by javacc in parser/TLAplusParserConstants.java.  As    *
* of 20 Apr 2007, the highest token number was 226 and NULL_ID was set     *
* equal to 227.  So, I upped the numbers by 100.                           *
***************************************************************************/
package tla2sany.st;

public interface SyntaxTreeConstants {

  int  NULL_ID =  327;
  int  N_ActDecl  =  328 ;
  int  N_ActionExpr  =  329 ;
  int  N_AssumeDecl  =  330 ;
  int  N_AssumeProve  =  331 ;
  int  N_Assumption  =  332 ;
  int  N_BeginModule  =  333 ;
  int  N_Body  =  334 ;
  int  N_BoundQuant  =  335 ;
  int  N_Case  =  336 ;
  int  N_CaseArm  =  337 ;
//  int  N_CaseStatement  =  338 ;    // Removed by LL 25 Jul 2007
//  int  N_ChooseStatement  =  339 ;  // Removed by LL 25 Jul 2007
  int  N_ConjItem  =  340 ;
  int  N_ConjList  =  341 ;
  int  N_ConsDecl  =  342 ;
  int  N_DisjItem  =  343 ;
  int  N_DisjList  =  344 ;
  int  N_EndModule  =  345 ;
  int  N_Except  =  346 ;
  int  N_ExceptComponent  =  347 ;
  int  N_ExceptSpec  =  348 ;
  int  N_Times =  349 ; // N_Expression
  int  N_Extends  =  350 ;
  int  N_FairnessExpr  =  351 ;
  int  N_FcnAppl  =  352 ;
  int  N_FcnConst  =  353 ;
  int  N_FieldSet  =  354 ;
  int  N_FieldVal  =  355 ;
  int  N_FunctionDefinition  =  356 ;
  int  N_FunctionParam  =  357 ;
  int  N_GeneralId  =  358 ;
  int  N_GenInfixOp  =  359 ;
  int  N_GenNonExpPrefixOp  =  360 ; // I think this is used only for unary -
  int  N_GenPostfixOp  =  361 ;
  int  N_GenPrefixOp  =  362 ;
  int  N_IdentDecl  =  363 ;
  int  N_Real       =  364; //  int  N_Identifier  =  264 ;
  int  N_IdentifierTuple  =  365 ;
  int  N_IdentLHS  =  366 ;
  int  N_IdPrefix  =  367 ;
  int  N_IdPrefixElement  =  368 ;
  int  N_IfThenElse  =  369 ;
  int  N_InfixDecl  =  370 ;
  int  N_InfixExpr  =  371 ;
  int  N_InfixLHS  =  372 ;
  int  N_InfixOp  =  373 ;
  int  N_InnerProof  =  374 ;
  int  N_Instance  =  375 ;
  int  N_NonLocalInstance  =  376 ;
  int  N_Integer  =  377 ;
//  int  N_LeafProof  =  378 ;          // Removed by LL 25 Jul 2007
  int  N_LetDefinitions  =  379 ;
  int  N_LetIn  =  380 ;
  int  N_MaybeBound  =  381 ;
  int  N_Module  =  382 ;
  int  N_ModuleDefinition  =  383 ;
  int  N_NonExpPrefixOp  =  384 ;
  int  N_Number  =  385 ;
  int  N_NumberedAssumeProve  =  386 ;
  int  N_OpApplication  =  387 ;
  int  N_OpArgs  =  388 ;
  int  N_OperatorDefinition  =  389 ;
  int  N_OtherArm  =  390 ;
  int  N_ParamDecl  =  391 ;
  int  N_ParamDeclaration  =  392 ;
  int  N_ParenExpr  =  393 ;
  int  N_PostfixDecl  =  394 ;
  int  N_PostfixExpr  =  395 ;
  int  N_PostfixLHS  =  396 ;
  int  N_PostfixOp  =  397 ;
  int  N_PrefixDecl  =  398 ;
  int  N_PrefixExpr  =  399 ;
  int  N_PrefixLHS  =  400 ;
  int  N_PrefixOp  =  401 ;
  int  N_Proof  =  402 ;
//  int  N_ProofLet  =  403 ;         // Removed by LL 25 Jul 2007
//  int  N_ProofName  =  404 ;        // Removed by LL 25 Jul 2007
//  int  N_ProofStatement  =  405 ;   // Removed by LL 25 Jul 2007
  int  N_ProofStep  =  406 ;        
  int  N_QEDStep  =  407 ;
  int  N_QuantBound  =  408 ;
  int  N_RcdConstructor  =  409 ;
  int  N_RecordComponent  =  410 ;
  int  N_SetEnumerate  =  411 ;
  int  N_SetExcept  =  412 ;
  int  N_SetOfAll  =  413 ;
  int  N_SetOfFcns  =  414 ;
  int  N_SetOfRcds  =  415 ;
  int  N_SExceptSpec  =  416 ;
  int  N_SFcnDecl  =  417 ;
  int  N_String  =  418 ;
  int  N_SubsetOf  =  419 ;
  int  N_Substitution  =  420 ;
  int  N_TempDecl  =  421 ;
  int  N_Theorem  =  422 ;
  int  N_Tuple  =  423 ;
  int  N_UnboundOrBoundChoose  =  424 ;
  int  N_UnboundQuant  =  425 ;
  int  N_VariableDeclaration  =  426 ;
  int  T_IN = 427 ;
  int  T_EQUAL = 428 ;
  int  N_NewSymb = 429 ;     // Added  6 Mar 07 by LL
  int  N_Lambda  = 430 ;     // Added 27 Mar 07 by LL
  int  N_Recursive  = 431 ;  // Added 29 Mar 07 by LL
  int  N_Label  = 432 ;      // Added 21 Apr 07 by LL
  int  N_StructOp = 433 ;
    /***********************************************************************
    * This was added 11 May 07 by LL to represent something like the "<"   *
    * in "!<".  A struct op has a single child that is a SyntaxTreeNode    *
    * either formed from one of the tokens "<<", ">>", "@", or ":" or      *
    * else from a NUMBER_LITERAL token.                                    *
    ***********************************************************************/
  int  N_NumerableStep = 434 ;      // Added 23 Jul 07 by LL
  int  N_TerminalProof = 435 ;      // Added 23 Jul 07 by LL
  int  N_UseOrHide     = 436 ;      // Added 24 Jul 07 by LL
  int  N_NonExprBody   = 437 ;      // Added 24 Jul 07 by LL
  int  N_DefStep       = 438 ;      // Added 25 Jul 07 by LL
  int  N_HaveStep      = 439 ;      // Added 15 Aug 07 by LL
  int  N_TakeStep      = 440 ;      // Added 15 Aug 07 by LL
  int  N_WitnessStep   = 441 ;      // Added 15 Aug 07 by LL
  int  N_PickStep      = 442 ;      // Added 15 Aug 07 by LL
  int  N_CaseStep      = 443 ;      // Added 15 Aug 07 by LL
  int  N_AssertStep    = 444 ;      // Added 15 Aug 07 by LL
    
  String[] SyntaxNodeImage = { /* name of symbol n should be n+1 lines down*/
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("Not a node"),
		    ("N_ActDecl"),
		    ("N_ActionExpr"),
		    ("N_AssumeDecl"),
		    ("N_AssumeProve"),
		    ("N_Assumption"),
		    ("N_BeginModule"),
		    ("N_Body"),
		    ("N_BoundedQuant"),
		    ("N_Case"),
		    ("N_CaseArm"),
		    ("N_CaseStatement"),
		    ("N_ChooseStatement"),
		    ("N_ConjItem"),
		    ("N_ConjList"),
		    ("N_ConsDecl"),
		    ("N_DisjItem"),
		    ("N_DisjList"),
		    ("N_EndModule"),
		    ("N_Except"),
		    ("N_ExceptComponent"),
		    ("N_ExceptSpec"),
		    ("N_Times"), // "N_Expression"),
		    ("N_Extends"),
		    ("N_FairnessExpr"),
		    ("N_FcnAppl"),
		    ("N_FcnConst"),
		    ("N_FieldSet"),
		    ("N_FieldVal"),
		    ("N_FunctionDefinition"),
		    ("N_FunctionParam"),
		    ("N_GeneralId"),
		    ("N_GenInfixOp"),
		    ("N_GenNonExpPrefixOp"),
		    ("N_GenPostfixOp"),
		    ("N_GenPrefixOp"),
		    ("N_IdentDecl"),
		    ("N_Real"), // was N_Identifier
		    ("N_IdentifierTuple"),
		    ("N_IdentLHS"),
		    ("N_IdPrefix"),
		    ("N_IdPrefixElement"),
		    ("N_IfThenElse"),
		    ("N_InfixDecl"),
		    ("N_InfixExpr"),
		    ("N_InfixLHS"),
		    ("N_InfixOp"),
		    ("N_InnerProof"),
		    ("N_Instance"),
		    ("N_NonLocalInstance"),
		    ("N_Integer"),
		    ("N_LeafProof"),
		    ("N_LetDefinitions"),
		    ("N_LetIn"),
		    ("N_MaybeBound"),
		    ("N_Module"),
		    ("N_ModuleDefinition"),
		    ("N_NonExpPrefixOp"),
		    ("N_Number"),
		    ("N_NumberedAssumeProve"),
		    ("N_OpApplication"),
		    ("N_OpArgs"),
		    ("N_OperatorDefinition"),
		    ("N_OtherArm"),
		    ("N_ParamDecl"),
		    ("N_ParamDeclaration"),
		    ("N_ParenExpr"),
		    ("N_PostfixDecl"),
		    ("N_PostfixExpr"),
		    ("N_PostfixLHS"),
		    ("N_PostfixOp"),
		    ("N_PrefixDecl"),
		    ("N_PrefixExpr"),
		    ("N_PrefixLHS"),
		    ("N_PrefixOp"),
		    ("N_Proof"),
		    ("N_ProofLet"),
		    ("N_ProofName"),
		    ("N_ProofStatement"),
		    ("N_ProofStep"),
		    ("N_QEDStep"),
		    ("N_QuantBound"),
		    ("N_RcdConstructor"),
		    ("N_RecordComponent"),
		    ("N_SetEnumerate"),
		    ("N_SetExcept"),
		    ("N_SetOfAll"),
		    ("N_SetOfFcns"),
		    ("N_SetOfRcds"),
		    ("N_SExceptSpec"),
		    ("N_SFcnDecl"),
		    ("N_String"),
		    ("N_SubsetOf"),
		    ("N_Substitution"),
		    ("N_TempDecl"),
		    ("N_Theorem"),
		    ("N_Tuple"),
		    ("N_UnBoundedOrBoundedChoose"),
		    ("N_UnboundedQuant"),
		    ("N_VariableDeclaration"),
		    ("Token ="),    // I don't understand why this shouldn't be "Token \\in" ??
		    ("Token \\in"), // I don't understand why this shouldn't be "Token =" ??
		    ("N_NewSymb"),  // Added  8 Mar 07 by LL
		    ("N_Lambda"),   // Added 27 Mar 07 by LL
		    ("N_Recursive"),  // Added 29 Mar 07 by LL
		    ("N_Label"),      // Added 21 Apr 07 by LL
		    ("N_StructOp"),
		    ("N_NumerableStep"), // Added 23 Jul 07 by LL
		    ("N_TerminalProof"), // Added 23 Jul 07 by LL
		    ("N_UseOrHide"),     // Added 24 Jul 07 by LL
		    ("N_NonExprBody"),   // Added 24 Jul 07 by LL
		    ("N_DefStep"),       // Added 25 Jul 07 by LL
		    ("N_HaveStep"),      // Added 15 Aug 07 by LL
		    ("N_TakeStep"),      // Added 15 Aug 07 by LL
		    ("N_WitnessStep"),   // Added 15 Aug 07 by LL
		    ("N_PickStep"),      // Added 15 Aug 07 by LL
		    ("N_CaseStep"),      // Added 15 Aug 07 by LL
		    ("N_AssertStep"),    // Added 15 Aug 07 by LL
		    ("Not a node")
		     };
}

