/* Generated By:55&JavaCC: Do not edit this line. TLAplusParserTokenManager.java */
package tla2sany.parser;
import tla2sany.st.ParseTree;
import tla2sany.st.TreeNode;
import tla2sany.utilities.Vector;
import tla2sany.utilities.Stack;
import tla2sany.utilities.Assert;
import util.UniqueString;
import util.ToolIO;

public class TLAplusParserTokenManager implements TLAplusParserConstants
{
  static int bracketCount = 0;
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4L) != 0L)
            return 10;
         return -1;
      case 1:
         if ((active0 & 0x4L) != 0L)
            return 9;
         return -1;
      case 2:
         if ((active0 & 0x4L) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa1_0(0x4L);
      default :
         return jjMoveNfa_0(11, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(3, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if (curChar == 45)
                     jjCheckNAddStates(0, 2);
                  break;
               case 2:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(2, 8);
                  break;
               case 9:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 10:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 69)
                     kind = 3;
                  break;
               case 4:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_4(0x40000000L);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_4(0, active0);
}
private final int jjMoveNfa_4(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 40)
                     jjAddStates(3, 4);
                  break;
               case 1:
                  if (curChar == 46)
                     kind = 31;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 42 && kind > 31)
                     kind = 31;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 58;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAddStates(5, 13);
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 11;
                  if (curChar == 48)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  break;
               case 1:
               case 2:
                  if (curChar == 45)
                     jjCheckNAddStates(14, 16);
                  break;
               case 3:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(3, 9);
                  break;
               case 10:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 11:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(17, 18);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAdd(19);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddStates(5, 13);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAdd(24);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(25, 28);
                  break;
               case 27:
               case 42:
               case 52:
                  if (curChar == 47)
                     jjCheckNAdd(26);
                  break;
               case 28:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(29, 32);
                  break;
               case 30:
                  if (curChar == 47 && kind > 111)
                     kind = 111;
                  break;
               case 32:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 43);
                  break;
               case 43:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 47);
                  break;
               case 47:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAdd(49);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(19, 20);
                  break;
               case 53:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(21, 22);
                  break;
               case 56:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjstateSet[jjnewStateCnt++] = 57;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe0777fffeL & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAddStates(23, 27);
                  }
                  else if ((0x880000L & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjAddStates(28, 30);
                  }
                  else if (curChar == 64)
                  {
                     if (kind > 229)
                        kind = 229;
                  }
                  else if (curChar == 95)
                     jjCheckNAddTwoStates(14, 15);
                  if (curChar == 83)
                     jjCheckNAdd(17);
                  else if (curChar == 87)
                     jjCheckNAdd(17);
                  break;
               case 4:
                  if (curChar == 69 && kind > 20)
                     kind = 20;
                  break;
               case 5:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 13:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 15:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAdd(16);
                  break;
               case 17:
                  if (curChar != 70)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if (curChar == 87)
                     jjCheckNAdd(17);
                  break;
               case 21:
                  if (curChar == 83)
                     jjCheckNAdd(17);
                  break;
               case 22:
                  if (curChar == 64)
                     kind = 229;
                  break;
               case 25:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(31, 32);
                  break;
               case 26:
                  if (curChar == 92 && kind > 110)
                     kind = 110;
                  break;
               case 29:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(33, 34);
                  break;
               case 31:
               case 46:
               case 55:
                  if (curChar == 92)
                     jjCheckNAdd(30);
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjAddStates(35, 36);
                  break;
               case 34:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAdd(35);
                  break;
               case 37:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAdd(38);
                  break;
               case 39:
                  if ((0x880000L & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjAddStates(28, 30);
                  break;
               case 40:
                  if ((0x7fffffe07ffffbeL & l) != 0L)
                     jjCheckNAddTwoStates(41, 43);
                  break;
               case 41:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(41, 43);
                  break;
               case 44:
                  if ((0x7fffffe07ffffbeL & l) != 0L)
                     jjCheckNAddTwoStates(45, 47);
                  break;
               case 45:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(45, 47);
                  break;
               case 48:
                  if ((0x7fffffe87ffffbeL & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAdd(49);
                  break;
               case 50:
                  if ((0x7fffffe0777fffeL & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAddStates(23, 27);
                  break;
               case 51:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(51, 53);
                  break;
               case 54:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(54, 56);
                  break;
               case 57:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAdd(57);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 58 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_5()
{
   return jjMoveNfa_5(0, 0);
}
private final int jjMoveNfa_5(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 32)
                     kind = 32;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 229;
            return 81;
         }
         if ((active1 & 0x4000000L) != 0L || (active2 & 0x1e0000000000000L) != 0L)
            return 3;
         if ((active1 & 0x200042000000000L) != 0L || (active3 & 0x1e0L) != 0L)
            return 166;
         if ((active0 & 0x60eb580000000000L) != 0L || (active1 & 0x2c0000000000187cL) != 0L)
         {
            jjmatchedKind = 229;
            return 229;
         }
         if ((active0 & 0x200000000000000L) != 0L || (active1 & 0x10000000001b2000L) != 0L)
         {
            jjmatchedKind = 229;
            return 146;
         }
         if ((active1 & 0x8000000L) != 0L || (active3 & 0x3e0000000L) != 0L)
            return 87;
         if ((active0 & 0x14000000000000L) != 0L || (active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 229;
            return 19;
         }
         if ((active0 & 0x30000000000L) != 0L)
         {
            jjmatchedKind = 229;
            return 112;
         }
         if ((active1 & 0x10020020000000L) != 0L || (active2 & 0xe000000000000000L) != 0L || (active3 & 0x1L) != 0L)
            return 100;
         if ((active0 & 0xc00000008000000L) != 0L || (active1 & 0x60000000000000L) != 0L || (active2 & 0xffffffffffff8L) != 0L || (active3 & 0x1c00000000L) != 0L)
            return 190;
         if ((active3 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 229;
            return -1;
         }
         if ((active1 & 0x2000000L) != 0L)
            return 230;
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0x102L) != 0L)
         {
            jjmatchedKind = 229;
            return 70;
         }
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 229;
            return 209;
         }
         if ((active1 & 0x8600L) != 0L)
         {
            jjmatchedKind = 229;
            return 14;
         }
         return -1;
      case 1:
         if ((active0 & 0x50f05b0000000000L) != 0L || (active1 & 0x6c000000000099feL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 229;
               jjmatchedPos = 1;
            }
            return 229;
         }
         if ((active1 & 0x4000000L) != 0L)
            return 2;
         if ((active0 & 0x400000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 45;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x200b000000000000L) != 0L)
            return 229;
         if ((active0 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 229;
               jjmatchedPos = 1;
            }
            return 223;
         }
         if ((active2 & 0xc0L) != 0L)
            return 44;
         if ((active1 & 0x600L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 229;
               jjmatchedPos = 1;
            }
            return 13;
         }
         if ((active0 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active2 & 0x7e000000L) != 0L)
            return 42;
         if ((active3 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 229;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 229;
               jjmatchedPos = 1;
            }
            return 80;
         }
         if ((active2 & 0x2000000000000000L) != 0L)
            return 99;
         if ((active1 & 0x1000000000132000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 229;
               jjmatchedPos = 1;
            }
            return 231;
         }
         if ((active0 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 229;
               jjmatchedPos = 1;
            }
            return 18;
         }
         if ((active0 & 0x200000000000000L) != 0L || (active1 & 0x80000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 229;
               jjmatchedPos = 1;
            }
            return 35;
         }
         if ((active2 & 0x8000L) != 0L)
            return 195;
         return -1;
      case 2:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active1 & 0x1000000000132000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 229;
               jjmatchedPos = 2;
            }
            return 231;
         }
         if ((active0 & 0x44000000000000L) != 0L || (active1 & 0x804L) != 0L)
            return 229;
         if ((active0 & 0x400000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 45;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 229;
               jjmatchedPos = 2;
            }
            return 222;
         }
         if ((active1 & 0x600L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 229;
               jjmatchedPos = 2;
            }
            return 12;
         }
         if ((active0 & 0x50b25b0000000000L) != 0L || (active1 & 0x6c000000000091faL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 229;
               jjmatchedPos = 2;
            }
            return 229;
         }
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 64;
               jjmatchedPos = 2;
            }
            return 82;
         }
         return -1;
      case 3:
         if ((active0 & 0x5000090000000000L) != 0L || (active1 & 0x8118L) != 0L)
            return 229;
         if ((active0 & 0x80b2520000000000L) != 0L || (active1 & 0x6c000000000016e2L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 229;
               jjmatchedPos = 3;
            }
            return 229;
         }
         if ((active1 & 0x1000000000032000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 229;
               jjmatchedPos = 3;
            }
            return 231;
         }
         if ((active0 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 229;
               jjmatchedPos = 3;
            }
            return 221;
         }
         if ((active1 & 0x100000L) != 0L)
            return 231;
         return -1;
      case 4:
         if ((active0 & 0x8022520000000000L) != 0L || (active1 & 0x4c000000000010e2L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 229;
               jjmatchedPos = 4;
            }
            return 229;
         }
         if ((active0 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 229;
               jjmatchedPos = 4;
            }
            return 220;
         }
         if ((active0 & 0x90000000000000L) != 0L || (active1 & 0x2000000000000600L) != 0L)
            return 229;
         if ((active1 & 0x1000000000030000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 229;
               jjmatchedPos = 4;
            }
            return 231;
         }
         if ((active1 & 0x2000L) != 0L)
            return 231;
         return -1;
      case 5:
         if ((active1 & 0x30000L) != 0L)
         {
            jjmatchedKind = 229;
            jjmatchedPos = 5;
            return 231;
         }
         if ((active0 & 0x8020124000000000L) != 0L || (active1 & 0x4000000000000080L) != 0L)
            return 229;
         if ((active0 & 0x2400000000000L) != 0L || (active1 & 0xc00000000001062L) != 0L)
         {
            jjmatchedKind = 229;
            jjmatchedPos = 5;
            return 229;
         }
         if ((active1 & 0x1000000000000000L) != 0L)
            return 231;
         return -1;
      case 6:
         if ((active0 & 0x2000000000000L) != 0L || (active1 & 0x800000000001000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 229;
               jjmatchedPos = 6;
            }
            return 229;
         }
         if ((active0 & 0x400000000000L) != 0L || (active1 & 0x400000000000062L) != 0L)
            return 229;
         if ((active1 & 0x20000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 229;
               jjmatchedPos = 6;
            }
            return 231;
         }
         if ((active1 & 0x10000L) != 0L)
            return 231;
         return -1;
      case 7:
         if ((active0 & 0x2000000000000L) != 0L)
            return 229;
         if ((active1 & 0x20000L) != 0L)
            return 231;
         if ((active1 & 0x800000000001000L) != 0L)
         {
            jjmatchedKind = 229;
            jjmatchedPos = 7;
            return 229;
         }
         return -1;
      case 8:
         if ((active1 & 0x800000000001000L) != 0L)
            return 229;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1, active2, active3), pos + 1);
}
private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 104;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x2000000L);
      case 35:
         jjmatchedKind = 186;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x200000000000000L, 0x0L);
      case 36:
         jjmatchedKind = 212;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x80000L);
      case 37:
         jjmatchedKind = 215;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x400000L);
      case 38:
         jjmatchedKind = 210;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x20000L);
      case 39:
         return jjStopAtPos(0, 112);
      case 40:
         jjmatchedKind = 91;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x3e0000000L);
      case 41:
         return jjStopAtPos(0, 92);
      case 42:
         jjmatchedKind = 194;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x2L);
      case 43:
         jjmatchedKind = 196;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x8L);
      case 44:
         return jjStopAtPos(0, 85);
      case 45:
         jjmatchedKind = 192;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x10020020000000L, 0xe000000000000000L, 0x0L);
      case 46:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x1800L);
      case 47:
         jjmatchedKind = 130;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x8000000000000000L, 0x3L, 0x0L);
      case 58:
         jjmatchedKind = 86;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x800000L, 0x0L, 0x1c000000L);
      case 60:
         jjmatchedKind = 200;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x200042000000000L, 0x0L, 0xe0L);
      case 61:
         jjmatchedKind = 184;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x4000000L, 0xe0000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 202;
         return jjMoveStringLiteralDfa1_2(0x0L, 0xc000000000L, 0x0L, 0x200L);
      case 63:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x200000L);
      case 64:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x1000000L);
      case 65:
         return jjMoveStringLiteralDfa1_2(0x4000000000L, 0x0L, 0x0L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_2(0x2000000000000000L, 0x0L, 0x0L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_2(0x30000000000L, 0x0L, 0x0L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_2(0x8000000000000000L, 0x4000000000000000L, 0x0L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_2(0x580000000000L, 0x400000000000000L, 0x0L, 0x0L);
      case 72:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x18L, 0x0L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_2(0xb000000000000L, 0x0L, 0x0L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_2(0x14000000000000L, 0x80L, 0x0L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_2(0x20000000000000L, 0x0L, 0x0L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_2(0x40000000000000L, 0x0L, 0x0L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_2(0x4080000000000000L, 0x60L, 0x0L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x8600L, 0x0L, 0x0L);
      case 81:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x800L, 0x0L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x1000L, 0x0L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_2(0x200000000000000L, 0x1000000000022000L, 0x0L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_2(0x1000000000000000L, 0x102L, 0x0L, 0x0L);
      case 85:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x2800000000000004L, 0x0L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x190000L, 0x0L, 0x0L);
      case 91:
         jjmatchedKind = 94;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x100000000000000L, 0x0L, 0x0L);
      case 92:
         jjmatchedKind = 179;
         return jjMoveStringLiteralDfa1_2(0xc00000008000000L, 0x60000000000000L, 0x7fffffffffff8L, 0x1c00000000L);
      case 93:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x80000000L, 0x0L, 0x0L);
      case 94:
         jjmatchedKind = 188;
         return jjMoveStringLiteralDfa1_2(0x0L, 0xe000000000000L, 0x800000000000000L, 0x0L);
      case 95:
         return jjStartNfaWithStates_2(0, 89, 230);
      case 123:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x200000000L, 0x0L, 0x0L);
      case 124:
         jjmatchedKind = 206;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x80400000000L, 0x0L, 0x1a000L);
      case 125:
         return jjStopAtPos(0, 100);
      case 126:
         jjmatchedKind = 119;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x10000000000000L, 0x0L);
      default :
         return jjMoveNfa_2(4, 0);
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0, long active1, long active2, long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0, active1, active2, active3);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         if ((active3 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 217);
         break;
      case 35:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 115);
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 185);
         break;
      case 36:
         if ((active3 & 0x80000L) != 0L)
            return jjStopAtPos(1, 211);
         break;
      case 37:
         if ((active3 & 0x400000L) != 0L)
            return jjStopAtPos(1, 214);
         break;
      case 38:
         if ((active3 & 0x20000L) != 0L)
            return jjStopAtPos(1, 209);
         break;
      case 42:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 114);
         else if ((active3 & 0x2L) != 0L)
            return jjStopAtPos(1, 193);
         break;
      case 43:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 113);
         else if ((active3 & 0x8L) != 0L)
            return jjStopAtPos(1, 195);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x8000000000000000L, active3, 0x20000000L);
      case 45:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 189, 99);
         else if ((active3 & 0x8000L) != 0L)
         {
            jjmatchedKind = 207;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x80000000000L, active2, 0L, active3, 0x40000000L);
      case 46:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 116);
         else if ((active3 & 0x1000L) != 0L)
         {
            jjmatchedKind = 204;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000800L);
      case 47:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 127);
         else if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(1, 131);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000L);
      case 58:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x40L) != 0L)
            return jjStopAtPos(1, 198);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000000L);
      case 60:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 101);
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 182);
         break;
      case 61:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_2(1, 90, 2);
         else if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(1, 129);
         else if ((active3 & 0x80L) != 0L)
         {
            jjmatchedKind = 199;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x200L) != 0L)
            return jjStopAtPos(1, 201);
         else if ((active3 & 0x10000L) != 0L)
            return jjStopAtPos(1, 208);
         else if ((active3 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 219);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x20L);
      case 62:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 105);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 180);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 181);
         else if ((active3 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 218);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x4000000000L, active2, 0L, active3, 0L);
      case 63:
         if ((active3 & 0x200000L) != 0L)
            return jjStopAtPos(1, 213);
         break;
      case 64:
         if ((active3 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 216);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_2(active0, 0x800010000000000L, active1, 0x190L, active2, 0L, active3, 0L);
      case 66:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x20L, active2, 0L, active3, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_2(active0, 0x8444000000000000L, active1, 0x1800L, active2, 0L, active3, 0L);
      case 70:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 48, 229);
         return jjMoveStringLiteralDfa2_2(active0, 0x200000000000000L, active1, 0x80000L, active2, 0L, active3, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_2(active0, 0x1000020000000000L, active1, 0x2L, active2, 0L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x118008L, active2, 0L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_2(active0, 0x80000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 77:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x40L, active2, 0L, active3, 0L);
      case 78:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0x4002000000000000L, active1, 0x2c00000000000000L, active2, 0L, active3, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_2(active0, 0x30000000000000L, active1, 0x4000000000000000L, active2, 0L, active3, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x600L, active2, 0L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa2_2(active0, 0x4000000000L, active1, 0x4L, active2, 0L, active3, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_2(active0, 0x80000000000000L, active1, 0x2000L, active2, 0L, active3, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x1000000000020000L, active2, 0L, active3, 0L);
      case 88:
         if ((active3 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 228);
         return jjMoveStringLiteralDfa2_2(active0, 0x500000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 89:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 61, 229);
         break;
      case 92:
         if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(1, 128);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000L);
      case 93:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 120);
         break;
      case 94:
         if ((active2 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 187);
         break;
      case 95:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x30L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0xc0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x1f00L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x6000L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x8000L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x30000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0xc0000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x20000000000000L, active2, 0x1e00000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0x400000000L);
      case 111:
         if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x7c000000L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x380000000L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x1fffc00000000L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000L);
      case 117:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x2000000100000L, active3, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x4000000000000L, active3, 0L);
      case 124:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 183);
         else if ((active2 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x2000L) != 0L)
            return jjStopAtPos(1, 205);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x20000000L, active2, 0L, active3, 0L);
      case 125:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa2_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(0, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0, active1, active2, active3);
      return 2;
   }
   switch(curChar)
   {
      case 41:
         if ((active3 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 221);
         else if ((active3 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 222);
         else if ((active3 & 0x80000000L) != 0L)
            return jjStopAtPos(2, 223);
         else if ((active3 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 224);
         break;
      case 45:
         if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 93);
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x8000000000000000L, active3, 0L);
      case 46:
         if ((active3 & 0x800L) != 0L)
            return jjStopAtPos(2, 203);
         break;
      case 61:
         if ((active3 & 0x10000000L) != 0L)
            return jjStopAtPos(2, 220);
         break;
      case 62:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(2, 107);
         else if ((active3 & 0x20L) != 0L)
            return jjStopAtPos(2, 197);
         break;
      case 65:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(2, 59);
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x400000000002000L, active2, 0L, active3, 0L);
      case 66:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x1000000000000000L, active2, 0L, active3, 0L);
      case 67:
         return jjMoveStringLiteralDfa3_2(active0, 0x10100000000000L, active1, 0x800000000009000L, active2, 0L, active3, 0L);
      case 68:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_2(2, 75, 229);
         return jjMoveStringLiteralDfa3_2(active0, 0x20000000000000L, active1, 0x8L, active2, 0L, active3, 0L);
      case 69:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(2, 58);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_2(2, 66, 229);
         return jjMoveStringLiteralDfa3_2(active0, 0x1000000000000000L, active1, 0x2L, active2, 0L, active3, 0L);
      case 70:
         return jjMoveStringLiteralDfa3_2(active0, 0x8000000000000000L, active1, 0x20000L, active2, 0L, active3, 0L);
      case 72:
         return jjMoveStringLiteralDfa3_2(active0, 0x80000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x2000000000000040L, active2, 0L, active3, 0L);
      case 75:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x100L, active2, 0L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa3_2(active0, 0x4000000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 77:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x4000000000000080L, active2, 0L, active3, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_2(active0, 0x20000000000L, active1, 0x600L, active2, 0L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa3_2(active0, 0x2094000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 84:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 50, 229);
         return jjMoveStringLiteralDfa3_2(active0, 0x400000000000L, active1, 0x110000L, active2, 0L, active3, 0L);
      case 86:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x30L, active2, 0L, active3, 0L);
      case 87:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 54, 229);
         break;
      case 88:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000L);
      case 95:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(2, 57);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(2, 83);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(2, 102);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x200100L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x4000200L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x40000000000000L, active2, 0x410000L, active3, 0L);
      case 103:
         if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(2, 145);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0xc00002440L, active3, 0x800000000L);
      case 108:
         if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(2, 151);
         break;
      case 109:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L);
      case 110:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x20000000000000L, active2, 0x180000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x1004800L, active3, 0x400000000L);
      case 112:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x2000010000010L, active3, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x3f000008000L, active3, 0L);
      case 114:
         if ((active2 & 0x4000000000000L) != 0L)
            return jjStopAtPos(2, 178);
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x380000000L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x20000020L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x40040000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x1f80000001080L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_2(1, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa3_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(1, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0, active1, active2, active3);
      return 3;
   }
   switch(curChar)
   {
      case 41:
         if ((active3 & 0x200000000L) != 0L)
            return jjStopAtPos(3, 225);
         break;
      case 62:
         if ((active2 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(3, 191);
         break;
      case 65:
         return jjMoveStringLiteralDfa4_2(active0, 0x10000000000000L, active1, 0x4000000000000000L, active2, 0L, active3, 0L);
      case 66:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x400000000000080L, active2, 0L, active3, 0L);
      case 69:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 40, 229);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 43, 229);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_2(3, 67, 229);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_2(3, 68, 229);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_2(3, 72, 229);
         return jjMoveStringLiteralDfa4_2(active0, 0x80500000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 70:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x20000L, active2, 0L, active3, 0L);
      case 72:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_2(3, 84, 231);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x800000000000000L, active2, 0L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_2(active0, 0x8000000000000000L, active1, 0x20L, active2, 0L, active3, 0L);
      case 75:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_2(3, 79, 229);
         break;
      case 78:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 60, 229);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x10000L, active2, 0L, active3, 0L);
      case 79:
         return jjMoveStringLiteralDfa4_2(active0, 0x20000000000L, active1, 0x2000000000000202L, active2, 0L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x1000000000000000L, active2, 0L, active3, 0L);
      case 84:
         return jjMoveStringLiteralDfa4_2(active0, 0x2000000000000L, active1, 0x2040L, active2, 0L, active3, 0L);
      case 85:
         return jjMoveStringLiteralDfa4_2(active0, 0x20004000000000L, active1, 0x1000L, active2, 0L, active3, 0L);
      case 86:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x400L, active2, 0L, active3, 0L);
      case 89:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 62, 229);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x40000000000L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x180000000000L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x603000000000L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x180000000L, active3, 0L);
      case 103:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(3, 118);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x40L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x48100000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x2000030000080L, active3, 0L);
      case 109:
         if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x800000000L, active3, 0x800000000L);
      case 110:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x200800L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x20000000000000L, active2, 0x204000200L, active3, 0L);
      case 112:
         if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(3, 136);
         else if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(3, 140);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x1800000000010L, active3, 0L);
      case 113:
         if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(3, 144);
         else if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(3, 150);
         break;
      case 114:
         if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(3, 152);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x400L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x3c000000000L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x84000L, active3, 0x400000000L);
      case 117:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x8000L, active3, 0L);
      case 118:
         if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(3, 141);
         break;
      case 121:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x20L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_2(2, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa4_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(2, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0, active1, active2, active3);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_2(active0, 0x2000000000000L, active1, 0x800000000000000L, active2, 0L, active3, 0L);
      case 68:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x80L, active2, 0L, active3, 0L);
      case 69:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_2(4, 74, 229);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_2(4, 77, 231);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x1000000000010000L, active2, 0L, active3, 0L);
      case 70:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_2(4, 73, 229);
         break;
      case 73:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x4000000000020000L, active2, 0L, active3, 0L);
      case 76:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 52, 229);
         return jjMoveStringLiteralDfa5_2(active0, 0x20000000000000L, active1, 0x400000000000000L, active2, 0L, active3, 0L);
      case 77:
         return jjMoveStringLiteralDfa5_2(active0, 0x4000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 78:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 125, 229);
         return jjMoveStringLiteralDfa5_2(active0, 0x8000400000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x20L, active2, 0L, active3, 0L);
      case 80:
         return jjMoveStringLiteralDfa5_2(active0, 0x100000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 82:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 55, 229);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x1002L, active2, 0L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa5_2(active0, 0x20000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 84:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x40L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x1020000000L, active3, 0L);
      case 99:
         if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(4, 138);
         else if ((active2 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x400100000040L, active3, 0L);
      case 100:
         if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(4, 149);
         break;
      case 101:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x800084000L, active3, 0x800000000L);
      case 103:
         if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(4, 139);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x8000L, active3, 0x400000000L);
      case 108:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x80L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x40000020L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x100000L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x200000000L, active3, 0L);
      case 114:
         if ((active2 & 0x40000000000L) != 0L)
            return jjStopAtPos(4, 170);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x10L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x1980000000000L, active3, 0L);
      case 116:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(4, 117);
         else if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(4, 137);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(4, 154);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x203e010000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_2(3, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa5_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(3, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, active0, active1, active2, active3);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_2(5, 71, 229);
         break;
      case 67:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x20000L, active2, 0L, active3, 0L);
      case 68:
         return jjMoveStringLiteralDfa6_2(active0, 0x400000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 69:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 38, 229);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 41, 229);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 53, 229);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 63, 229);
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x400000000000042L, active2, 0L, active3, 0L);
      case 78:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 126, 229);
         return jjMoveStringLiteralDfa6_2(active0, 0x2000000000000L, active1, 0x800000000000000L, active2, 0L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x11000L, active2, 0L, active3, 0L);
      case 84:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 44, 229);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 124, 231);
         break;
      case 85:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x20L, active2, 0L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0L, active2, 0x14000000000L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0L, active2, 0x1d80140000080L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0L, active2, 0x40L, active3, 0L);
      case 110:
         if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(5, 148);
         else if ((active3 & 0x400000000L) != 0L)
            return jjStopAtPos(5, 226);
         break;
      case 111:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0L, active2, 0x10L, active3, 0L);
      case 112:
         if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(5, 133);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStopAtPos(5, 164);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(5, 165);
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0L, active2, 0x28000000000L, active3, 0L);
      case 113:
         if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(5, 142);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStopAtPos(5, 163);
         break;
      case 114:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0L, active2, 0x80000L, active3, 0L);
      case 115:
         if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(5, 156);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStopAtPos(5, 177);
         else if ((active3 & 0x800000000L) != 0L)
            return jjStopAtPos(5, 227);
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0L, active2, 0x20000000L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0L, active2, 0x200000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L);
      case 118:
         if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(5, 143);
         break;
      default :
         break;
   }
   return jjStartNfa_2(4, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa6_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(4, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, active0, active1, active2, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa7_2(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 68:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_2(6, 70, 229);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 122, 229);
         break;
      case 69:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x20000L, active2, 0L);
      case 71:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x1000L, active2, 0L);
      case 77:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_2(6, 65, 229);
         break;
      case 83:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 46, 229);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_2(6, 69, 229);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_2(6, 80, 231);
         break;
      case 104:
         if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(6, 157);
         break;
      case 111:
         if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(6, 161);
         break;
      case 113:
         if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(6, 160);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStopAtPos(6, 174);
         break;
      case 114:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0L, active2, 0x40L);
      case 115:
         if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(6, 155);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(6, 158);
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0L, active2, 0x3c000080000L);
      case 116:
         if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(6, 135);
         else if ((active2 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0L, active2, 0x1100000000000L);
      case 120:
         if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(6, 132);
         break;
      default :
         break;
   }
   return jjStartNfa_2(5, active0, active1, active2, 0L);
}
private final int jjMoveStringLiteralDfa7_2(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_2(5, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(6, active0, active1, active2, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_2(7, 49, 229);
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 83:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_2(7, 81, 231);
         break;
      case 86:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x1000L, active2, 0L);
      case 99:
         if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(7, 134);
         break;
      case 101:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0L, active2, 0x113c000080000L);
      default :
         break;
   }
   return jjStartNfa_2(6, active0, active1, active2, 0L);
}
private final int jjMoveStringLiteralDfa8_2(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_2(6, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(7, 0L, active1, active2, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 68:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_2(8, 123, 229);
         break;
      case 69:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_2(8, 76, 229);
         break;
      case 99:
         return jjMoveStringLiteralDfa9_2(active1, 0L, active2, 0x80000L);
      case 113:
         if ((active2 & 0x100000000000L) != 0L)
            return jjStopAtPos(8, 172);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStopAtPos(8, 176);
         break;
      case 116:
         if ((active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 166;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_2(active1, 0L, active2, 0x30000000000L);
      default :
         break;
   }
   return jjStartNfa_2(7, 0L, active1, active2, 0L);
}
private final int jjMoveStringLiteralDfa9_2(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_2(7, 0L, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(8, 0L, 0L, active2, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa10_2(active2, 0x30000000000L);
      case 116:
         if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(9, 147);
         break;
      default :
         break;
   }
   return jjStartNfa_2(8, 0L, 0L, active2, 0L);
}
private final int jjMoveStringLiteralDfa10_2(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_2(8, 0L, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(9, 0L, 0L, active2, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 113:
         if ((active2 & 0x10000000000L) != 0L)
            return jjStopAtPos(10, 168);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStopAtPos(10, 169);
         break;
      default :
         break;
   }
   return jjStartNfa_2(9, 0L, 0L, active2, 0L);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 229;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 166:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(181, 182);
                  else if ((0xc0000000000L & l) != 0L)
                     jjCheckNAdd(182);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(178, 179);
                  else if ((0xc0000000000L & l) != 0L)
                     jjCheckNAdd(179);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(173, 174);
                  else if ((0xc0000000000L & l) != 0L)
                     jjCheckNAdd(174);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(167, 168);
                  else if ((0xc0000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 171;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 230)
                        kind = 230;
                     jjCheckNAdd(165);
                  }
                  else if ((0xc0000000000L & l) != 0L)
                  {
                     if (kind > 231)
                        kind = 231;
                  }
                  break;
               case 146:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(155);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(151, 153);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(147, 149);
                  break;
               case 230:
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 161;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 158;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     jjCheckNAddStates(37, 45);
                  }
                  else if (curChar == 60)
                     jjCheckNAddStates(46, 55);
                  else if (curChar == 45)
                     jjAddStates(56, 57);
                  else if (curChar == 40)
                     jjAddStates(58, 59);
                  else if (curChar == 34)
                     jjCheckNAddStates(60, 63);
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if (curChar == 48)
                  {
                     if (kind > 108)
                        kind = 108;
                  }
                  break;
               case 220:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 161;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 158;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  break;
               case 223:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 161;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 158;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 161;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 158;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 161;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 158;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 161;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 158;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 161;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 158;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  break;
               case 87:
                  if (curChar == 42)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 99:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 101;
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 229:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 161;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 158;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  break;
               case 221:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 161;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 158;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 161;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 158;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 161;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 158;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 161;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 158;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  break;
               case 209:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 161;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 158;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  break;
               case 100:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 103;
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 161;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 158;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  break;
               case 222:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 161;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 158;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 161;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 158;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  break;
               case 231:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(155);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 152;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(151, 153);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 148;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(147, 149);
                  break;
               case 0:
               case 1:
                  if (curChar != 61)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 3:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 21:
                  if (curChar == 48 && kind > 108)
                     kind = 108;
                  break;
               case 22:
               case 28:
                  if (curChar == 34)
                     jjCheckNAddStates(60, 63);
                  break;
               case 23:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(60, 63);
                  break;
               case 25:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjAddStates(64, 65);
                  break;
               case 26:
                  if (curChar == 39)
                     jjCheckNAddStates(60, 63);
                  break;
               case 29:
                  if (curChar == 34 && kind > 109)
                     kind = 109;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAdd(36);
                  break;
               case 42:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 85:
                  if (curChar == 40)
                     jjAddStates(58, 59);
                  break;
               case 86:
                  if (curChar == 46 && kind > 26)
                     kind = 26;
                  break;
               case 88:
                  if (curChar == 42 && kind > 26)
                     kind = 26;
                  break;
               case 89:
                  if (curChar == 45)
                     jjAddStates(56, 57);
                  break;
               case 90:
               case 91:
                  if (curChar == 45)
                     jjCheckNAddStates(66, 68);
                  break;
               case 92:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(92, 98);
                  break;
               case 101:
               case 102:
                  if (curChar != 45)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(102);
                  break;
               case 103:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 104:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 129:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjCheckNAddStates(37, 45);
                  break;
               case 130:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjCheckNAdd(130);
                  break;
               case 131:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(131, 134);
                  break;
               case 133:
               case 148:
               case 158:
                  if (curChar == 47)
                     jjCheckNAdd(132);
                  break;
               case 134:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(135, 138);
                  break;
               case 136:
                  if (curChar == 47 && kind > 111)
                     kind = 111;
                  break;
               case 138:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(139, 140);
                  break;
               case 141:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 142:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(142, 143);
                  break;
               case 144:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 147:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(147, 149);
                  break;
               case 149:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(151, 153);
                  break;
               case 151:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(151, 153);
                  break;
               case 153:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAdd(155);
                  break;
               case 155:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAdd(155);
                  break;
               case 157:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  break;
               case 159:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  break;
               case 162:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAdd(163);
                  break;
               case 164:
                  if (curChar == 60)
                     jjCheckNAddStates(46, 55);
                  break;
               case 165:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 230)
                     kind = 230;
                  jjCheckNAdd(165);
                  break;
               case 167:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(167, 168);
                  break;
               case 168:
                  if (curChar == 62)
                     jjCheckNAdd(169);
                  break;
               case 169:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(169);
                  break;
               case 170:
                  if ((0xc0000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 171:
                  if (curChar == 62)
                     jjCheckNAdd(172);
                  break;
               case 172:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(172);
                  break;
               case 173:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(173, 174);
                  break;
               case 174:
                  if (curChar == 62)
                     jjCheckNAdd(175);
                  break;
               case 175:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(175, 176);
                  break;
               case 176:
                  if (curChar != 46)
                     break;
                  if (kind > 234)
                     kind = 234;
                  jjCheckNAdd(176);
                  break;
               case 177:
                  if ((0xc0000000000L & l) != 0L)
                     jjCheckNAdd(174);
                  break;
               case 178:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(178, 179);
                  break;
               case 179:
                  if (curChar == 62 && kind > 235)
                     kind = 235;
                  break;
               case 180:
                  if ((0xc0000000000L & l) != 0L)
                     jjCheckNAdd(179);
                  break;
               case 181:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(181, 182);
                  break;
               case 182:
                  if (curChar == 62)
                     jjCheckNAddStates(69, 71);
                  break;
               case 183:
                  if (curChar != 42)
                     break;
                  if (kind > 236)
                     kind = 236;
                  jjCheckNAdd(184);
                  break;
               case 184:
                  if (curChar != 46)
                     break;
                  if (kind > 236)
                     kind = 236;
                  jjCheckNAdd(184);
                  break;
               case 185:
                  if (curChar != 45)
                     break;
                  if (kind > 236)
                     kind = 236;
                  jjCheckNAdd(186);
                  break;
               case 186:
                  if (curChar != 46)
                     break;
                  if (kind > 236)
                     kind = 236;
                  jjCheckNAdd(186);
                  break;
               case 187:
                  if (curChar != 46)
                     break;
                  if (kind > 236)
                     kind = 236;
                  jjCheckNAdd(187);
                  break;
               case 188:
                  if ((0xc0000000000L & l) != 0L)
                     jjCheckNAdd(182);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 146:
                  if ((0x7fffffe87ffffbeL & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(155);
                  }
                  else if (curChar == 70)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjstateSet[jjnewStateCnt++] = 35;
                  }
                  if ((0x7fffffe07ffffbeL & l) != 0L)
                     jjCheckNAddTwoStates(151, 153);
                  if ((0x7fffffe07ffffbeL & l) != 0L)
                     jjCheckNAddTwoStates(147, 149);
                  break;
               case 230:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(33);
                  }
                  break;
               case 80:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 82;
                  if (curChar == 70)
                  {
                     if (kind > 64)
                        kind = 64;
                  }
                  break;
               case 4:
                  if ((0x7fffffe0777fffeL & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAddStates(72, 76);
                  }
                  else if ((0x880000L & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjAddStates(77, 79);
                  }
                  else if (curChar == 92)
                     jjAddStates(80, 83);
                  else if (curChar == 64)
                  {
                     if (kind > 229)
                        kind = 229;
                  }
                  else if (curChar == 95)
                     jjCheckNAddTwoStates(31, 32);
                  if (curChar == 65)
                     jjAddStates(84, 87);
                  else if (curChar == 67)
                     jjAddStates(88, 90);
                  else if (curChar == 68)
                     jjAddStates(91, 92);
                  else if (curChar == 84)
                     jjAddStates(93, 94);
                  else if (curChar == 86)
                     jjAddStates(95, 96);
                  else if (curChar == 92)
                     jjAddStates(97, 99);
                  else if (curChar == 83)
                     jjCheckNAdd(34);
                  else if (curChar == 87)
                     jjCheckNAdd(34);
                  else if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 220:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 219;
                  break;
               case 223:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 222;
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 70:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 77;
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 112:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 127;
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 119;
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 190:
                  if ((0x10000000100L & l) != 0L)
                     jjCheckNAdd(46);
                  else if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 202;
                  else if (curChar == 65)
                  {
                     if (kind > 47)
                        kind = 47;
                  }
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 195;
                  else if (curChar == 69)
                  {
                     if (kind > 45)
                        kind = 45;
                  }
                  break;
               case 229:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  break;
               case 221:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 220;
                  break;
               case 82:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  if (curChar == 83)
                  {
                     if (kind > 64)
                        kind = 64;
                  }
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 209:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  if (curChar == 88)
                     jjstateSet[jjnewStateCnt++] = 227;
                  else if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 223;
                  else if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 214;
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 208;
                  break;
               case 81:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 83;
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 222:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(163);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 231:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAdd(155);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(151, 153);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(147, 149);
                  break;
               case 5:
                  if (curChar == 78 && kind > 56)
                     kind = 56;
                  break;
               case 6:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 15:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 65 && kind > 56)
                     kind = 56;
                  break;
               case 17:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 20:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 23:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     jjCheckNAddStates(60, 63);
                  break;
               case 24:
                  if (curChar == 96)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 25:
                  jjCheckNAddTwoStates(25, 26);
                  break;
               case 27:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x14404010000000L & l) != 0L)
                     jjCheckNAddStates(60, 63);
                  break;
               case 30:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 32:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAdd(33);
                  break;
               case 34:
                  if (curChar != 70)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAdd(36);
                  break;
               case 37:
                  if (curChar == 87)
                     jjCheckNAdd(34);
                  break;
               case 38:
                  if (curChar == 83)
                     jjCheckNAdd(34);
                  break;
               case 39:
                  if (curChar == 64 && kind > 229)
                     kind = 229;
                  break;
               case 40:
                  if (curChar == 92)
                     jjAddStates(97, 99);
                  break;
               case 41:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 43:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 45:
                  if ((0x10000000100L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjCheckNAdd(46);
                  break;
               case 47:
                  if (curChar == 86)
                     jjAddStates(95, 96);
                  break;
               case 48:
                  if (curChar == 69 && kind > 82)
                     kind = 82;
                  break;
               case 49:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 83 && kind > 82)
                     kind = 82;
                  break;
               case 56:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 84)
                     jjAddStates(93, 94);
                  break;
               case 64:
                  if (curChar == 76 && kind > 78)
                     kind = 78;
                  break;
               case 65:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 71:
                  if (curChar == 83 && kind > 78)
                     kind = 78;
                  break;
               case 72:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 68)
                     jjAddStates(91, 92);
                  break;
               case 83:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 93:
                  if (curChar == 69 && kind > 34)
                     kind = 34;
                  break;
               case 94:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 105:
                  if (curChar == 67)
                     jjAddStates(88, 90);
                  break;
               case 106:
                  if (curChar == 84 && kind > 42)
                     kind = 42;
                  break;
               case 107:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 113:
                  if (curChar == 83 && kind > 42)
                     kind = 42;
                  break;
               case 114:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if (curChar == 89 && kind > 56)
                     kind = 56;
                  break;
               case 122:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 131:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(100, 101);
                  break;
               case 132:
                  if (curChar == 92 && kind > 110)
                     kind = 110;
                  break;
               case 135:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(102, 103);
                  break;
               case 137:
               case 152:
               case 161:
                  if (curChar == 92)
                     jjCheckNAdd(136);
                  break;
               case 139:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjAddStates(104, 105);
                  break;
               case 140:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAdd(141);
                  break;
               case 141:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAdd(141);
                  break;
               case 143:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAdd(144);
                  break;
               case 144:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAdd(144);
                  break;
               case 145:
                  if ((0x880000L & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjAddStates(77, 79);
                  break;
               case 147:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(147, 149);
                  break;
               case 150:
                  if ((0x7fffffe07ffffbeL & l) != 0L)
                     jjCheckNAddTwoStates(151, 153);
                  break;
               case 151:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(151, 153);
                  break;
               case 154:
                  if ((0x7fffffe87ffffbeL & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAdd(155);
                  break;
               case 155:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAdd(155);
                  break;
               case 156:
                  if ((0x7fffffe0777fffeL & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAddStates(72, 76);
                  break;
               case 157:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(157, 159);
                  break;
               case 160:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(160, 162);
                  break;
               case 163:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAdd(163);
                  break;
               case 169:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 172:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 175:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(106, 107);
                  break;
               case 189:
                  if (curChar == 92)
                     jjAddStates(80, 83);
                  break;
               case 191:
                  if (curChar == 115 && kind > 45)
                     kind = 45;
                  break;
               case 192:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 194:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 195:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 196:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 195;
                  break;
               case 197:
                  if (curChar == 65 && kind > 47)
                     kind = 47;
                  break;
               case 198:
                  if (curChar == 108 && kind > 47)
                     kind = 47;
                  break;
               case 199:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 200:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 201:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 202:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               case 203:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 202;
                  break;
               case 204:
                  if (curChar == 65)
                     jjAddStates(84, 87);
                  break;
               case 205:
                  if (curChar == 78 && kind > 37)
                     kind = 37;
                  break;
               case 206:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 207:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 208:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 210:
                  if (curChar == 83 && kind > 37)
                     kind = 37;
                  break;
               case 211:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 210;
                  break;
               case 212:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 213:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 214:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 215:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 216:
                  if (curChar == 78 && kind > 39)
                     kind = 39;
                  break;
               case 217:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 218:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 219:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 224:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 223;
                  break;
               case 225:
                  if (curChar == 77 && kind > 39)
                     kind = 39;
                  break;
               case 226:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 225;
                  break;
               case 227:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 226;
                  break;
               case 228:
                  if (curChar == 88)
                     jjstateSet[jjnewStateCnt++] = 227;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 23:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(60, 63);
                  break;
               case 25:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(64, 65);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 229 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x20000000L);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_3(0, active0);
}
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 40)
                     jjAddStates(3, 4);
                  break;
               case 1:
                  if (curChar == 46)
                     kind = 28;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 42 && kind > 28)
                     kind = 28;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 2, 8, 2, 3, 24, 25, 28, 29, 32, 33, 34, 36, 37, 2, 3, 
   9, 14, 15, 51, 53, 54, 56, 51, 53, 54, 56, 57, 40, 44, 48, 25, 
   28, 29, 32, 33, 34, 130, 131, 134, 135, 138, 139, 140, 142, 143, 165, 166, 
   167, 170, 173, 177, 178, 180, 181, 188, 100, 104, 87, 88, 23, 24, 27, 29, 
   25, 26, 91, 92, 98, 183, 185, 187, 157, 159, 160, 162, 163, 146, 150, 154, 
   190, 196, 197, 203, 209, 215, 224, 228, 112, 120, 128, 81, 84, 70, 78, 54, 
   62, 41, 43, 45, 131, 134, 135, 138, 139, 140, 175, 176, 
};
public static final String[] jjstrLiteralImages = {
"", null, "\55\55\55\76", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "PRAGMA", 
   "SPEC", 
   "IN_COMMENT", 
   "EMBEDDED", 
   "IN_EOL_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 
   -1, 3, 5, 4, 2, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffc0018000dL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x1f3fffffffffL, 
};
static final long[] jjtoSkip = {
   0x1f3e00010L, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x1f0000000L, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x20c000000L, 0x0L, 0x0L, 0xc000000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[229];
private final int[] jjstateSet = new int[458];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public TLAplusParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public TLAplusParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 229; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 6 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 4)
         {
            jjmatchedKind = 4;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 21)
         {
            jjmatchedKind = 21;
         }
         break;
       case 2:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 33)
         {
            jjmatchedKind = 33;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 33)
         {
            jjmatchedKind = 33;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 33)
         {
            jjmatchedKind = 33;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 28 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                     bracketCount++;
         break;
      case 30 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
            bracketCount--; if (bracketCount == 0) SwitchTo( IN_COMMENT );
         break;
      case 31 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                     bracketCount++;
         break;
      default :
         break;
   }
}
}
