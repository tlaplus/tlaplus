// Copyright (c) 2007 Microsoft Corporation.  All rights reserved.
package tla2sany.semantic;

import tla2sany.st.TreeNode;

/***************************************************************************
* This abstract class represents a proof.  It just provides a way of       *
* giving a single superclass name to the two classes that extend it:       *
* LeafProofNode and NonLeafProofNode.                                      *
***************************************************************************/
public abstract class ProofNode extends LevelNode {
  ProofNode(int kind, TreeNode stn) { super(kind, stn); }

}

/***************************************************************************
* For want of a better place, here is an explanation of how SUFFICES is    *
* handled.                                                                 *
*                                                                          *
* The handling of SUFFICES steps.                                          *
*                                                                          *
* Let S be an expression or an ASSUME/PROVE. Let stepid be a step name,    *
* which can be either <i> or <i>j (or something equivalent to one of       *
* them).  The proof step                                                   *
*                                                                          *
*     stepid S                                                             *
*                                                                          *
* generates a TheoremNode whose body is the node generated by S, which     *
* is either an ExprNode or an AssumeProveNode.  The isSuffices() method    *
* of the TheoremNode returns false.                                        *
*                                                                          *
* The proof step                                                           *
*                                                                          *
*   stepid SUFFICES S                                                      *
*                                                                          *
* generates a TheoremNode whose body is either an ExprNode or an           *
* AssumeProveNode.  If S is an expression, then the body is effectively    *
* $Suffices(S), where $Suffices is a dummy built-in operator.  The         *
* isSuffices() method of the TheoremNode returns true.                     *
*                                                                          *
* If stepid is the step number <i>j, this step effectively adds the        *
* definition                                                               *
*                                                                          *
*    <i>j == body                                                          *
*                                                                          *
* where body is the body of the TheoremNode.  (That is, it equals S        *
* except for a SUFFICES in which S is an expression.)  This definition     *
* is represented by a ThmOrAssumpNode whose isSuffices() method equals     *
* the isSuffices() method of the TheoremNode.                              *
*                                                                          *
* A use of the name <i>j produces an OpApplNode whose operator is (the     *
* ThmOrAssumpNode of) the 0-argument user-defined operator <i>j.  For a    *
* SUFFICES step or if S is an ASSUME/PROVE, this can be used only as a     *
* fact (in a USE or BY).  A selector like <i>j!... names a subexpression   *
* of the body of the definition as usual, except for one case.  For        *
*                                                                          *
*    <i>j SUFFICES ASSUME A1, ... , An PROVE P                             *
*                                                                          *
* the selector <i>j!1 names the ASSUME/PROVE. That is, it generates an     *
* AssumeProveNode.  Thus, if S is either an expression or an ASSUME/PROVE, *
* in                                                                       *
*                                                                          *
*    <i>j SUFFICES S                                                       *
*                                                                          *
* the selector <i>j!1 names S.                                             *
*                                                                          *
* ------------------                                                       *
* Here is a detailed explanation of the four possible cases (with or       *
* without SUFFICES, and S an expression or an ASSUME/PROVE).               *
*                                                                          *
* <1>1. 4 = exp                                                            *
*                                                                          *
* This produces a TheoremNode whose theoremExprOrAssumeProve field is the  *
* ExprNode for 4=exp (and whose isSuffices() method returns false).  It    *
* also essentially defines                                                 *
*                                                                          *
*   <1>1 == 4 = exp                                                        *
*                                                                          *
* (the definition represented by a ThmOrAssumpDefNode) so any use of <1>1  *
* produces an OpApplNode with no arguments whose getOperator() method      *
* returns the ThmOrAssumpDefNode for the user-defined operator <1>1.       *
*                                                                          *
* The expression <1>1!2 generates an OpApplNode whose operator is $Nop     *
* and whose single argument is the ExprNode generated by exp.              *
*                                                                          *
* ------                                                                   *
*                                                                          *
* <1>2. SUFFICES 4 = exp                                                   *
*                                                                          *
* This produces a TheoremNode whose theoremExprOrAssumeProve field is the  *
* OpApplNode whose operator is $Suffices and whose single argument is the  *
* ExprNode for 4=exp (an OpApplNode whose operator is =) and whose         *
* isSuffices() method returns true.  It also essentially defines           *
*                                                                          *
*    <1>2 == $Suffices(4 = exp)                                            *
*                                                                          *
* where $Suffices is a dummy built-in operator.                            *
*                                                                          *
* The name <1>2 can be used by itself only as a fact (in a BY or USE).     *
* When used as a fact, it generates an OpApplNode with no arguments        *
* whose getOperator() method returns the ThmOrAssumpDefNode for the        *
* user-defined operator <1>2.  The isSuffices() method of this             *
* ThmOrAssumpDefNode returns true.                                         *
*                                                                          *
* The expression <1>2!1 generates an OpApplNode whose operator is $Nop     *
* and whose single argument is the ExprNode generated by 4=exp.            *
*                                                                          *
* The expression <1>2!1!2 generates an OpApplNode whose operator is $Nop   *
* and whose single argument is the ExprNode generated by exp.              *
*                                                                          *
* -------                                                                  *
*                                                                          *
* <1>3. ASSUME A1, A2 PROVE P                                              *
*                                                                          *
* This produces a TheoremNode whose theoremExprOrAssumeProve field is an   *
* AssumeProveNode and whose isSuffices() method returns false.  It also    *
* essentially defines                                                      *
*                                                                          *
*   <1>3 == ASSUME A1, A2 PROVE P                                          *
*                                                                          *
* where the definition is represented by a ThmOrAssumpDefNode whose        *
* isSuffices() method returns false.                                       *
*                                                                          *
* The name <1>3 can be used by itself only as a fact (in a BY or USE).     *
* When used as a fact, it generates an OpApplNode with no arguments        *
* whose getOperator() method returns the ThmOrAssumpDefNode for the        *
* user-defined operator <1>3.                                              *
*                                                                          *
* The expression <1>3!1 produces an OpApplNode whose operator is $Nop      *
* and whose single argument is the ExprNode generated by A1.               *
*                                                                          *
* ---------                                                                *
*                                                                          *
* <1>4. SUFFICES ASSUME A1, A2 PROVE P                                     *
*                                                                          *
* This produces a TheoremNode whose theoremExprOrAssumeProve field is an   *
* AssumeProveNode and whose isSuffices() method returns true.  It also     *
* essentially defines                                                      *
*                                                                          *
*   <1>4 == ASSUME A1, A2 PROVE P                                          *
*                                                                          *
* where the definition is represented by a ThmOrAssumpDefNode whose        *
* isSuffices() method returns true.                                        *
*                                                                          *
* The name <1>4 can be used by itself only as a fact (in a BY or USE).     *
* When used as a fact, it generates an OpApplNode with no arguments        *
* whose getOperator() method returns the ThmOrAssumpDefNode for the        *
* user-defined operator <1>4.                                              *
*                                                                          *
* The name <1>4!1 can be used only as a fact (in a BY or USE).  The fact   *
* it generates is an AssumeProveNode.                                      *
*                                                                          *
* The expression <1>4!1!2 produces an OpApplNode whose operator is $Nop    *
* and whose single argument is the ExprNode generated by A2.               *
***************************************************************************/
